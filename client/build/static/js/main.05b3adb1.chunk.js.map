{"version":3,"sources":["utils/accessToken.ts","generated/graphql.tsx","components/Loading/Loading.tsx","utils/theme.ts","pages/Home.tsx","schemas /registerValidationSchema.ts","components/Forms/FormTextField.tsx","components/Alerts/AlertMessage.tsx","components/Register/Register.style.ts","components/Register/Register.tsx","schemas /loginValidationSchema.ts","components/Login/Login.style.ts","components/Login/Login.tsx","components/Charts/Chart.tsx","components/Typography/Title.tsx","assets/world.svg","assets/flag.svg","assets/uk.svg","utils/currencies.ts","components/Accounts/styles/Accounts.style.ts","components/cards/AccountsCard.tsx","components/Dialog/Dialog.tsx","assets/mc_symbol.svg","components/cards/ApolloCard.tsx","components/Accounts/Accounts.tsx","components/Accounts/styles/Account.style.ts","components/styles/cards/TransactionCard.style.ts","components/cards/TransactionCard.tsx","components/Transactions/Transactions.tsx","schemas /addMoneyValidationSchema.ts","components/Accounts/Account.tsx","components/Toolbar/Toolbar.style.ts","components/SideDrawer/DrawerToggleButton.style.ts","components/SideDrawer/DrawerToggleButton.tsx","components/Toolbar/Toolbar.tsx","components/SideDrawer/SideDrawer.style.ts","components/SideDrawer/SideDrawer.tsx","components/Backdrop/Backdrop.style.ts","components/Backdrop/Backdrop.tsx","Routes.tsx","index.tsx","App.tsx"],"names":["accessToken","getAccessToken","setAccessToken","token","AccountDocument","gql","AccountsDocument","AddMoneyDocument","CardsDocument","useCardsQuery","baseOptions","ApolloReactHooks","CreateAccountDocument","CreateCardDocument","CreateTransactionDocument","ExchangeDocument","LoginDocument","LogoutDocument","useLogoutMutation","MeDocument","useMeQuery","RegisterDocument","TransactionsDocument","useTransactionsQuery","UsersDocument","ColorScheme","Loading","style","display","justifyContent","src","alt","height","Home","data","fetchPolicy","users","map","x","key","id","email","firstName","lastName","theme","createMuiTheme","palette","primary","main","PRIMARY","secondary","ORANGE","info","MAROON","contrastThreshold","tonalOffset","registerValidationSchema","yup","required","streetAddres","postCode","city","country","password","value","min","confirmPassword","oneOf","dateOfBirth","FormTextField","placeholder","className","type","props","useField","field","meta","errorText","error","touched","ThemeProvider","TextField","variant","helperText","SuccessMessage","message","Alert","severity","ErrorMessage","useRegisterStyles","makeStyles","root","margin","top","width","headerText","textAlign","fontWeight","alignedFormContent","marginTop","alignedFormField","formField","formButton","textTransform","letterSpacing","loginText","margintop","spacer","Register","history","register","useState","errorMessage","setErrorMessage","classes","length","initialValues","validationSchema","onSubmit","a","setSubmitting","resetForm","variables","streetAddress","response","push","isSubmitting","onChange","name","Button","disabled","color","href","loginValidationSchema","useLoginStyles","registerText","Login","login","update","store","writeQuery","query","me","user","split","Chart","currency","transactions","transaction","date","Date","parse","toLocaleDateString","transactionType","amount","right","left","bottom","strokeDasharray","dataKey","stroke","fill","Title","Typography","fontSize","title","_extends","Object","assign","target","i","arguments","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref","svgRef","y","viewBox","enableBackground","xmlSpace","ref","cx","cy","r","points","ForwardRef","forwardRef","d","Currency","useAccountsStyles","content","flexGrow","overflow","container","paddingTop","spacing","paddingBottom","paper","padding","flexDirection","borderRadius","fixedHeight","accountCardHeight","chart","AccountsCard","svg","currencyIcon","fullCurrencyText","balance","iban","onAccountClicked","alignItems","IconButton","onClick","component","Divider","light","NoAccountsCard","onCreateNewAccountClicked","startIcon","useDialogStyles","createUseStyles","dialog","maxWidth","position","transform","zIndex","backgroundColor","closeButton","marginBottom","cursor","border","alignSelf","Dialog","children","isOpen","onClose","undefined","ApolloCard","cardNumber","validThru","cvv","role","aria-label","NoApolloCard","onCreateNewCardClicked","currencies","Accounts","loading","cards","useCreateAccountMutation","createAccount","useCreateCardMutation","createCard","analyticsAccount","setAnalyticsAccount","totalBalance","setTotalBalance","openDialog","setOpenDialog","useHistory","accountCardHeightPaper","chartPaper","useEffect","accounts","forEach","account","handleCreateNewCardClicked","e","preventDefault","refetchQueries","console","log","List","index","ListItem","button","ListItemIcon","c","determineCurrencyIcon","ListItemText","Container","FormControl","InputLabel","Select","labelId","event","label","MenuItem","Grid","item","xs","md","lg","Paper","EURO","DOLLAR","POUND","BITCOIN","pathname","state","handleAccountClicked","card","expiresIn","getMonth","getFullYear","toString","substr","useAccountStyles","accountBalance","accountInfo","accountButtonsSection","accountButton","WHITE","accountButtonSection","accountButtonText","transactionsHeader","transactionCards","dialogButton","useTransactionCardStyles","createStyles","expand","marginLeft","transition","transitions","create","duration","shortest","expandOpen","expandedText","TransactionCard","time","fee","expanded","setExpanded","Card","CardHeader","avatar","Avatar","subheader","CardActions","aria-expanded","Collapse","in","timeout","unmountOnExit","CardContent","borderBottom","Transactions","addMoneyValidationSchema","positive","integer","Account","location","useLocation","toAccountCurrency","setToAccountCurrency","setAccountBalance","openAddDialog","setOpenAddDialog","openExchangeDialog","setOpenExchangeDialog","openDetailsDialog","setOpenDetailsDialog","successMessage","setSuccessMessage","createTransaction","useAddMoneyMutation","addMoney","useExchangeMutation","exchange","useAccountQuery","currencyFullText","simulate","selectedAccountCurrency","success","filter","bic","renderDetailsDialog","useToolbarStyles","toolbar","navigation","logo","textDecoration","toggleButton","navigationItems","listStyle","SECONDARY","navButton","HOVER","outline","flex","useDrawerToggleButtonStyles","background","boxSizing","toggleButtonLine","DrawerToggleButton","click","Toolbar","logout","client","showAuthUserButtons","setShowAuthUserButtons","drawerClickHandler","routeTo","then","resetStore","useSideDrawerStyles","siderDrawer","boxShadow","open","authUserNavigationItems","nonAuthUserNavigationItems","SideDrawer","showAuthUserNavigationItems","setShowAuthUserNavigationItems","drawerClasses","show","logOutClicked","useBackdropStyles","backdrop","Backdrop","AuthenticatedRoute","Component","rest","render","to","LoggedInRoute","Routes","sideDrawerOpen","setSideDrawerOpen","Helmet","exact","path","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","headers","authorization","subscribe","next","bind","complete","catch","unsubscribe","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","exp","jwtDecode","now","fetchAccessToken","fetch","process","method","credentials","handleFetch","handleError","err","warn","onError","graphQLErrors","networkError","HttpLink","uri","ReactDOM","setLoading","res","json","document","getElementById"],"mappings":"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","file":"static/js/main.05b3adb1.chunk.js","sourcesContent":["export let accessToken: string = '';\n\nexport const getAccessToken = (): string => {\n    return accessToken;\n};\n\nexport const setAccessToken = (token: string): void => {\n    accessToken = token;\n};\n","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  DateTime: any,\n};\n\nexport type Account = {\n   __typename?: 'Account',\n  id: Scalars['Int'],\n  sortCode: Scalars['String'],\n  iban: Scalars['String'],\n  bic: Scalars['String'],\n  currency: Scalars['String'],\n  balance: Scalars['Float'],\n};\n\nexport type AccountResponse = {\n   __typename?: 'AccountResponse',\n  account: Account,\n};\n\nexport type Card = {\n   __typename?: 'Card',\n  id: Scalars['Int'],\n  cardNumber: Scalars['String'],\n  pin: Scalars['Float'],\n  expiresIn: Scalars['DateTime'],\n  cvv: Scalars['Float'],\n  monthlySpendingLimit: Scalars['Float'],\n};\n\n\nexport type ExchangeResponse = {\n   __typename?: 'ExchangeResponse',\n  account: Account,\n  success: Scalars['Boolean'],\n};\n\nexport type LoginResponse = {\n   __typename?: 'LoginResponse',\n  accessToken: Scalars['String'],\n  user: User,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  logout: Scalars['Boolean'],\n  revokeRefreshTokensForUser: Scalars['Boolean'],\n  login: LoginResponse,\n  register: Scalars['Boolean'],\n  addMoney: AccountResponse,\n  exchange: ExchangeResponse,\n  createAccount: Scalars['Boolean'],\n  createTransaction: Scalars['Float'],\n  createCard: Scalars['Boolean'],\n};\n\n\nexport type MutationRevokeRefreshTokensForUserArgs = {\n  userId: Scalars['Int']\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'],\n  email: Scalars['String']\n};\n\n\nexport type MutationRegisterArgs = {\n  country: Scalars['String'],\n  city: Scalars['String'],\n  postCode: Scalars['String'],\n  streetAddress: Scalars['String'],\n  dateOfBirth: Scalars['String'],\n  lastName: Scalars['String'],\n  firsName: Scalars['String'],\n  password: Scalars['String'],\n  email: Scalars['String']\n};\n\n\nexport type MutationAddMoneyArgs = {\n  currency: Scalars['String'],\n  amount: Scalars['Float']\n};\n\n\nexport type MutationExchangeArgs = {\n  amount: Scalars['Float'],\n  toAccountCurrency: Scalars['String'],\n  selectedAccountCurrency: Scalars['String']\n};\n\n\nexport type MutationCreateAccountArgs = {\n  currency: Scalars['String']\n};\n\n\nexport type MutationCreateTransactionArgs = {\n  currency: Scalars['String']\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  hello: Scalars['String'],\n  bye: Scalars['String'],\n  users: Array<User>,\n  me?: Maybe<User>,\n  accounts: Array<Account>,\n  account: Account,\n  transactions: Array<Transaction>,\n  cards: Array<Card>,\n};\n\n\nexport type QueryAccountArgs = {\n  currency: Scalars['String']\n};\n\n\nexport type QueryTransactionsArgs = {\n  currency: Scalars['String']\n};\n\nexport type Transaction = {\n   __typename?: 'Transaction',\n  id: Scalars['Int'],\n  transactionType: Scalars['String'],\n  date: Scalars['DateTime'],\n  amount: Scalars['String'],\n};\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['Int'],\n  email: Scalars['String'],\n  firstName: Scalars['String'],\n  lastName: Scalars['String'],\n};\n\nexport type AccountQueryVariables = {\n  currency: Scalars['String']\n};\n\n\nexport type AccountQuery = (\n  { __typename?: 'Query' }\n  & { account: (\n    { __typename?: 'Account' }\n    & Pick<Account, 'id' | 'balance'>\n  ) }\n);\n\nexport type AccountsQueryVariables = {};\n\n\nexport type AccountsQuery = (\n  { __typename?: 'Query' }\n  & { accounts: Array<(\n    { __typename?: 'Account' }\n    & Pick<Account, 'id' | 'balance' | 'currency' | 'sortCode' | 'iban' | 'bic'>\n  )> }\n);\n\nexport type AddMoneyMutationVariables = {\n  amount: Scalars['Float'],\n  currency: Scalars['String']\n};\n\n\nexport type AddMoneyMutation = (\n  { __typename?: 'Mutation' }\n  & { addMoney: (\n    { __typename?: 'AccountResponse' }\n    & { account: (\n      { __typename?: 'Account' }\n      & Pick<Account, 'id' | 'balance'>\n    ) }\n  ) }\n);\n\nexport type ByeQueryVariables = {};\n\n\nexport type ByeQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'bye'>\n);\n\nexport type CardsQueryVariables = {};\n\n\nexport type CardsQuery = (\n  { __typename?: 'Query' }\n  & { cards: Array<(\n    { __typename?: 'Card' }\n    & Pick<Card, 'id' | 'cardNumber' | 'pin' | 'expiresIn' | 'cvv' | 'monthlySpendingLimit'>\n  )> }\n);\n\nexport type CreateAccountMutationVariables = {\n  currency: Scalars['String']\n};\n\n\nexport type CreateAccountMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createAccount'>\n);\n\nexport type CreateCardMutationVariables = {};\n\n\nexport type CreateCardMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createCard'>\n);\n\nexport type CreateTransactionMutationVariables = {\n  currency: Scalars['String']\n};\n\n\nexport type CreateTransactionMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createTransaction'>\n);\n\nexport type ExchangeMutationVariables = {\n  selectedAccountCurrency: Scalars['String'],\n  toAccountCurrency: Scalars['String'],\n  amount: Scalars['Float']\n};\n\n\nexport type ExchangeMutation = (\n  { __typename?: 'Mutation' }\n  & { exchange: (\n    { __typename?: 'ExchangeResponse' }\n    & Pick<ExchangeResponse, 'success'>\n    & { account: (\n      { __typename?: 'Account' }\n      & Pick<Account, 'id' | 'balance'>\n    ) }\n  ) }\n);\n\nexport type HelloQueryVariables = {};\n\n\nexport type HelloQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'hello'>\n);\n\nexport type LoginMutationVariables = {\n  email: Scalars['String'],\n  password: Scalars['String']\n};\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'LoginResponse' }\n    & Pick<LoginResponse, 'accessToken'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'email' | 'firstName' | 'lastName'>\n    ) }\n  ) }\n);\n\nexport type LogoutMutationVariables = {};\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'firstName' | 'lastName'>\n  )> }\n);\n\nexport type RegisterMutationVariables = {\n  email: Scalars['String'],\n  password: Scalars['String'],\n  firstName: Scalars['String'],\n  lastName: Scalars['String'],\n  dateOfBirth: Scalars['String'],\n  streetAddress: Scalars['String'],\n  postCode: Scalars['String'],\n  city: Scalars['String'],\n  country: Scalars['String']\n};\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'register'>\n);\n\nexport type TransactionsQueryVariables = {\n  currency: Scalars['String']\n};\n\n\nexport type TransactionsQuery = (\n  { __typename?: 'Query' }\n  & { transactions: Array<(\n    { __typename?: 'Transaction' }\n    & Pick<Transaction, 'id' | 'transactionType' | 'date' | 'amount'>\n  )> }\n);\n\nexport type UsersQueryVariables = {};\n\n\nexport type UsersQuery = (\n  { __typename?: 'Query' }\n  & { users: Array<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'firstName' | 'lastName'>\n  )> }\n);\n\n\nexport const AccountDocument = gql`\n    query Account($currency: String!) {\n  account(currency: $currency) {\n    id\n    balance\n  }\n}\n    `;\n\n/**\n * __useAccountQuery__\n *\n * To run a query within a React component, call `useAccountQuery` and pass it any options that fit your needs.\n * When your component renders, `useAccountQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAccountQuery({\n *   variables: {\n *      currency: // value for 'currency'\n *   },\n * });\n */\nexport function useAccountQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AccountQuery, AccountQueryVariables>) {\n        return ApolloReactHooks.useQuery<AccountQuery, AccountQueryVariables>(AccountDocument, baseOptions);\n      }\nexport function useAccountLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AccountQuery, AccountQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AccountQuery, AccountQueryVariables>(AccountDocument, baseOptions);\n        }\nexport type AccountQueryHookResult = ReturnType<typeof useAccountQuery>;\nexport type AccountLazyQueryHookResult = ReturnType<typeof useAccountLazyQuery>;\nexport type AccountQueryResult = ApolloReactCommon.QueryResult<AccountQuery, AccountQueryVariables>;\nexport const AccountsDocument = gql`\n    query Accounts {\n  accounts {\n    id\n    balance\n    currency\n    sortCode\n    iban\n    bic\n  }\n}\n    `;\n\n/**\n * __useAccountsQuery__\n *\n * To run a query within a React component, call `useAccountsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAccountsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAccountsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAccountsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AccountsQuery, AccountsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AccountsQuery, AccountsQueryVariables>(AccountsDocument, baseOptions);\n      }\nexport function useAccountsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AccountsQuery, AccountsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AccountsQuery, AccountsQueryVariables>(AccountsDocument, baseOptions);\n        }\nexport type AccountsQueryHookResult = ReturnType<typeof useAccountsQuery>;\nexport type AccountsLazyQueryHookResult = ReturnType<typeof useAccountsLazyQuery>;\nexport type AccountsQueryResult = ApolloReactCommon.QueryResult<AccountsQuery, AccountsQueryVariables>;\nexport const AddMoneyDocument = gql`\n    mutation AddMoney($amount: Float!, $currency: String!) {\n  addMoney(amount: $amount, currency: $currency) {\n    account {\n      id\n      balance\n    }\n  }\n}\n    `;\nexport type AddMoneyMutationFn = ApolloReactCommon.MutationFunction<AddMoneyMutation, AddMoneyMutationVariables>;\n\n/**\n * __useAddMoneyMutation__\n *\n * To run a mutation, you first call `useAddMoneyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddMoneyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addMoneyMutation, { data, loading, error }] = useAddMoneyMutation({\n *   variables: {\n *      amount: // value for 'amount'\n *      currency: // value for 'currency'\n *   },\n * });\n */\nexport function useAddMoneyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddMoneyMutation, AddMoneyMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddMoneyMutation, AddMoneyMutationVariables>(AddMoneyDocument, baseOptions);\n      }\nexport type AddMoneyMutationHookResult = ReturnType<typeof useAddMoneyMutation>;\nexport type AddMoneyMutationResult = ApolloReactCommon.MutationResult<AddMoneyMutation>;\nexport type AddMoneyMutationOptions = ApolloReactCommon.BaseMutationOptions<AddMoneyMutation, AddMoneyMutationVariables>;\nexport const ByeDocument = gql`\n    query Bye {\n  bye\n}\n    `;\n\n/**\n * __useByeQuery__\n *\n * To run a query within a React component, call `useByeQuery` and pass it any options that fit your needs.\n * When your component renders, `useByeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useByeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useByeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ByeQuery, ByeQueryVariables>) {\n        return ApolloReactHooks.useQuery<ByeQuery, ByeQueryVariables>(ByeDocument, baseOptions);\n      }\nexport function useByeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ByeQuery, ByeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ByeQuery, ByeQueryVariables>(ByeDocument, baseOptions);\n        }\nexport type ByeQueryHookResult = ReturnType<typeof useByeQuery>;\nexport type ByeLazyQueryHookResult = ReturnType<typeof useByeLazyQuery>;\nexport type ByeQueryResult = ApolloReactCommon.QueryResult<ByeQuery, ByeQueryVariables>;\nexport const CardsDocument = gql`\n    query Cards {\n  cards {\n    id\n    cardNumber\n    pin\n    expiresIn\n    cvv\n    monthlySpendingLimit\n  }\n}\n    `;\n\n/**\n * __useCardsQuery__\n *\n * To run a query within a React component, call `useCardsQuery` and pass it any options that fit your needs.\n * When your component renders, `useCardsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCardsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCardsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CardsQuery, CardsQueryVariables>) {\n        return ApolloReactHooks.useQuery<CardsQuery, CardsQueryVariables>(CardsDocument, baseOptions);\n      }\nexport function useCardsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CardsQuery, CardsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CardsQuery, CardsQueryVariables>(CardsDocument, baseOptions);\n        }\nexport type CardsQueryHookResult = ReturnType<typeof useCardsQuery>;\nexport type CardsLazyQueryHookResult = ReturnType<typeof useCardsLazyQuery>;\nexport type CardsQueryResult = ApolloReactCommon.QueryResult<CardsQuery, CardsQueryVariables>;\nexport const CreateAccountDocument = gql`\n    mutation CreateAccount($currency: String!) {\n  createAccount(currency: $currency)\n}\n    `;\nexport type CreateAccountMutationFn = ApolloReactCommon.MutationFunction<CreateAccountMutation, CreateAccountMutationVariables>;\n\n/**\n * __useCreateAccountMutation__\n *\n * To run a mutation, you first call `useCreateAccountMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateAccountMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createAccountMutation, { data, loading, error }] = useCreateAccountMutation({\n *   variables: {\n *      currency: // value for 'currency'\n *   },\n * });\n */\nexport function useCreateAccountMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateAccountMutation, CreateAccountMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateAccountMutation, CreateAccountMutationVariables>(CreateAccountDocument, baseOptions);\n      }\nexport type CreateAccountMutationHookResult = ReturnType<typeof useCreateAccountMutation>;\nexport type CreateAccountMutationResult = ApolloReactCommon.MutationResult<CreateAccountMutation>;\nexport type CreateAccountMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateAccountMutation, CreateAccountMutationVariables>;\nexport const CreateCardDocument = gql`\n    mutation createCard {\n  createCard\n}\n    `;\nexport type CreateCardMutationFn = ApolloReactCommon.MutationFunction<CreateCardMutation, CreateCardMutationVariables>;\n\n/**\n * __useCreateCardMutation__\n *\n * To run a mutation, you first call `useCreateCardMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCardMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCardMutation, { data, loading, error }] = useCreateCardMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useCreateCardMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateCardMutation, CreateCardMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateCardMutation, CreateCardMutationVariables>(CreateCardDocument, baseOptions);\n      }\nexport type CreateCardMutationHookResult = ReturnType<typeof useCreateCardMutation>;\nexport type CreateCardMutationResult = ApolloReactCommon.MutationResult<CreateCardMutation>;\nexport type CreateCardMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateCardMutation, CreateCardMutationVariables>;\nexport const CreateTransactionDocument = gql`\n    mutation CreateTransaction($currency: String!) {\n  createTransaction(currency: $currency)\n}\n    `;\nexport type CreateTransactionMutationFn = ApolloReactCommon.MutationFunction<CreateTransactionMutation, CreateTransactionMutationVariables>;\n\n/**\n * __useCreateTransactionMutation__\n *\n * To run a mutation, you first call `useCreateTransactionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTransactionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTransactionMutation, { data, loading, error }] = useCreateTransactionMutation({\n *   variables: {\n *      currency: // value for 'currency'\n *   },\n * });\n */\nexport function useCreateTransactionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateTransactionMutation, CreateTransactionMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateTransactionMutation, CreateTransactionMutationVariables>(CreateTransactionDocument, baseOptions);\n      }\nexport type CreateTransactionMutationHookResult = ReturnType<typeof useCreateTransactionMutation>;\nexport type CreateTransactionMutationResult = ApolloReactCommon.MutationResult<CreateTransactionMutation>;\nexport type CreateTransactionMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateTransactionMutation, CreateTransactionMutationVariables>;\nexport const ExchangeDocument = gql`\n    mutation Exchange($selectedAccountCurrency: String!, $toAccountCurrency: String!, $amount: Float!) {\n  exchange(selectedAccountCurrency: $selectedAccountCurrency, toAccountCurrency: $toAccountCurrency, amount: $amount) {\n    account {\n      id\n      balance\n    }\n    success\n  }\n}\n    `;\nexport type ExchangeMutationFn = ApolloReactCommon.MutationFunction<ExchangeMutation, ExchangeMutationVariables>;\n\n/**\n * __useExchangeMutation__\n *\n * To run a mutation, you first call `useExchangeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useExchangeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [exchangeMutation, { data, loading, error }] = useExchangeMutation({\n *   variables: {\n *      selectedAccountCurrency: // value for 'selectedAccountCurrency'\n *      toAccountCurrency: // value for 'toAccountCurrency'\n *      amount: // value for 'amount'\n *   },\n * });\n */\nexport function useExchangeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ExchangeMutation, ExchangeMutationVariables>) {\n        return ApolloReactHooks.useMutation<ExchangeMutation, ExchangeMutationVariables>(ExchangeDocument, baseOptions);\n      }\nexport type ExchangeMutationHookResult = ReturnType<typeof useExchangeMutation>;\nexport type ExchangeMutationResult = ApolloReactCommon.MutationResult<ExchangeMutation>;\nexport type ExchangeMutationOptions = ApolloReactCommon.BaseMutationOptions<ExchangeMutation, ExchangeMutationVariables>;\nexport const HelloDocument = gql`\n    query Hello {\n  hello\n}\n    `;\n\n/**\n * __useHelloQuery__\n *\n * To run a query within a React component, call `useHelloQuery` and pass it any options that fit your needs.\n * When your component renders, `useHelloQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHelloQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useHelloQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<HelloQuery, HelloQueryVariables>) {\n        return ApolloReactHooks.useQuery<HelloQuery, HelloQueryVariables>(HelloDocument, baseOptions);\n      }\nexport function useHelloLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<HelloQuery, HelloQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<HelloQuery, HelloQueryVariables>(HelloDocument, baseOptions);\n        }\nexport type HelloQueryHookResult = ReturnType<typeof useHelloQuery>;\nexport type HelloLazyQueryHookResult = ReturnType<typeof useHelloLazyQuery>;\nexport type HelloQueryResult = ApolloReactCommon.QueryResult<HelloQuery, HelloQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    user {\n      id\n      email\n      firstName\n      lastName\n    }\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    email\n    firstName\n    lastName\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($email: String!, $password: String!, $firstName: String!, $lastName: String!, $dateOfBirth: String!, $streetAddress: String!, $postCode: String!, $city: String!, $country: String!) {\n  register(email: $email, password: $password, firsName: $firstName, lastName: $lastName, dateOfBirth: $dateOfBirth, streetAddress: $streetAddress, postCode: $postCode, city: $city, country: $country)\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      firstName: // value for 'firstName'\n *      lastName: // value for 'lastName'\n *      dateOfBirth: // value for 'dateOfBirth'\n *      streetAddress: // value for 'streetAddress'\n *      postCode: // value for 'postCode'\n *      city: // value for 'city'\n *      country: // value for 'country'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const TransactionsDocument = gql`\n    query Transactions($currency: String!) {\n  transactions(currency: $currency) {\n    id\n    transactionType\n    date\n    amount\n  }\n}\n    `;\n\n/**\n * __useTransactionsQuery__\n *\n * To run a query within a React component, call `useTransactionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTransactionsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTransactionsQuery({\n *   variables: {\n *      currency: // value for 'currency'\n *   },\n * });\n */\nexport function useTransactionsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TransactionsQuery, TransactionsQueryVariables>) {\n        return ApolloReactHooks.useQuery<TransactionsQuery, TransactionsQueryVariables>(TransactionsDocument, baseOptions);\n      }\nexport function useTransactionsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TransactionsQuery, TransactionsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<TransactionsQuery, TransactionsQueryVariables>(TransactionsDocument, baseOptions);\n        }\nexport type TransactionsQueryHookResult = ReturnType<typeof useTransactionsQuery>;\nexport type TransactionsLazyQueryHookResult = ReturnType<typeof useTransactionsLazyQuery>;\nexport type TransactionsQueryResult = ApolloReactCommon.QueryResult<TransactionsQuery, TransactionsQueryVariables>;\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    email\n    firstName\n    lastName\n  }\n}\n    `;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n      }\nexport function useUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = ApolloReactCommon.QueryResult<UsersQuery, UsersQueryVariables>;","import React from 'react';\n\nexport const Loading: React.FC = () => {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n            }}\n        >\n            <img src=\"loading.svg\" alt=\"Loading...\" style={{ height: '124px' }} />\n        </div>\n    );\n};\n","import { createMuiTheme, Theme } from '@material-ui/core';\n\nexport enum ColorScheme {\n    PRIMARY = '#222B2D',\n    SECONDARY = '#29AABB',\n    ORANGE = '#F15742',\n    MAROON = '#432D32',\n    WHITE = '#FFFEF9',\n    HOVER = '#148C9C',\n}\n\n// For Material UI\nexport const theme: Theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: ColorScheme.PRIMARY,\n        },\n        secondary: {\n            main: ColorScheme.ORANGE,\n        },\n        info: {\n            main: ColorScheme.MAROON,\n        },\n        contrastThreshold: 3,\n        tonalOffset: 0.2,\n    },\n});\n","import React from 'react';\nimport { useUsersQuery } from '../generated/graphql';\nimport { Loading } from '../components/Loading/Loading';\n\ninterface Props {}\n\nexport const Home: React.FC<Props> = () => {\n    const { data } = useUsersQuery({ fetchPolicy: 'network-only' });\n\n    if (!data) {\n        return <Loading />;\n    }\n\n    return (\n        <div>\n            <div>users: </div>\n            <ul>\n                {data.users.map(x => {\n                    return (\n                        <li key={x.id}>\n                            {x.id}, {x.email}, {x.firstName} {x.lastName}\n                        </li>\n                    );\n                })}\n            </ul>\n        </div>\n    );\n};\n","import * as yup from 'yup';\n\nexport const registerValidationSchema = yup.object({\n    firstName: yup.string().required('First name is required'),\n    lastName: yup.string().required('Last name is required'),\n    email: yup\n        .string()\n        .email()\n        .required('Email is required'),\n    streetAddres: yup.string().required('Street address is required'),\n    postCode: yup.string().required('Post code is required'),\n    city: yup.string().required('City is required'),\n    country: yup.string().required('Country is required'),\n    password: yup.lazy(value =>\n        !value\n            ? yup.string()\n            : yup\n                  .string()\n                  .min(6, 'Password must be at least 6 characters')\n                  .required('Password is required'),\n    ),\n    confirmPassword: yup.string().oneOf([yup.ref('password')], 'Passwords do not match'),\n    dateOfBirth: yup.date().required('Date of birth is required'),\n});\n","import { FieldAttributes, useField } from 'formik';\nimport React from 'react';\nimport { ThemeProvider, TextField } from '@material-ui/core';\nimport { theme } from '../../utils/theme';\n\nexport const FormTextField: React.FC<FieldAttributes<{}>> = ({\n    placeholder,\n    className,\n    type,\n    ...props\n}) => {\n    const [field, meta] = useField<{}>(props);\n    const errorText: string = meta.error && meta.touched ? meta.error : '';\n\n    return (\n        <ThemeProvider theme={theme}>\n            <TextField\n                className={className}\n                type={type}\n                variant=\"outlined\"\n                required={true}\n                placeholder={placeholder}\n                {...field}\n                helperText={errorText}\n                error={!!errorText}\n            />\n        </ThemeProvider>\n    );\n};\n","import React from 'react';\nimport { Alert } from '@material-ui/lab';\n\ninterface AlertMessageProps {\n    message: string;\n}\n\nexport const SuccessMessage: React.FC<AlertMessageProps> = ({ message }) => {\n    return (\n        <Alert variant=\"outlined\" severity=\"success\">\n            {message}\n        </Alert>\n    );\n};\n\nexport const WarningMessage: React.FC<AlertMessageProps> = ({ message }) => {\n    return (\n        <Alert variant=\"outlined\" severity=\"warning\">\n            {message}\n        </Alert>\n    );\n};\n\nexport const ErrorMessage: React.FC<AlertMessageProps> = ({ message }) => {\n    return (\n        <Alert variant=\"outlined\" severity=\"error\">\n            {message}\n        </Alert>\n    );\n};\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useRegisterStyles = makeStyles({\n    root: {\n        margin: '0 auto',\n        top: '25%',\n        height: '100%',\n        width: '348px',\n    },\n    headerText: {\n        textAlign: 'center',\n        fontWeight: 'bold',\n    },\n    alignedFormContent: {\n        marginTop: 12,\n        display: 'flex',\n        width: '100%',\n    },\n    alignedFormField: {\n        width: '50%',\n    },\n    formField: {\n        width: '100%',\n        marginTop: 12,\n    },\n    formButton: {\n        marginTop: 12,\n        textTransform: 'none',\n        fontWeight: 'bold',\n        letterSpacing: 1,\n        textAlign: 'center',\n    },\n    loginText: {\n        margintop: 12,\n    },\n    spacer: {\n        width: 8,\n    },\n});\n","import React, { useState } from 'react';\nimport { Formik, Form } from 'formik';\nimport {\n    useRegisterMutation,\n    RegisterMutationVariables,\n    RegisterMutation,\n} from '../../generated/graphql';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Button, ThemeProvider } from '@material-ui/core';\nimport { theme } from '../../utils/theme';\nimport { registerValidationSchema } from '../../schemas /registerValidationSchema';\nimport { FormTextField } from '../Forms/FormTextField';\nimport { ErrorMessage } from '../Alerts/AlertMessage';\nimport { useRegisterStyles } from './Register.style';\nimport { MutationTuple } from '@apollo/react-hooks';\n\nexport const Register: React.FC<RouteComponentProps> = ({ history }) => {\n    const [register]: MutationTuple<\n        RegisterMutation,\n        RegisterMutationVariables\n    > = useRegisterMutation();\n    const [errorMessage, setErrorMessage] = useState<string>('');\n    const classes = useRegisterStyles();\n\n    return (\n        <div>\n            <div>\n                <h1 className={classes.headerText}>Sign Up</h1>\n            </div>\n            {errorMessage.length > 0 && (\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\n                    <ErrorMessage message={errorMessage} />\n                </div>\n            )}\n            <Formik\n                initialValues={{\n                    firstName: '',\n                    lastName: '',\n                    streetAddres: '',\n                    postCode: '',\n                    city: '',\n                    country: '',\n                    email: '',\n                    password: '',\n                    confirmPassword: '',\n                    dateOfBirth: '',\n                }}\n                validationSchema={registerValidationSchema}\n                onSubmit={async (data, { setSubmitting, resetForm }) => {\n                    setSubmitting(true);\n\n                    const response = await register({\n                        variables: {\n                            firstName: data.firstName,\n                            lastName: data.lastName,\n                            email: data.email,\n                            password: data.password,\n                            streetAddress: data.streetAddres,\n                            postCode: data.postCode,\n                            city: data.city,\n                            country: data.country,\n                            dateOfBirth: data.dateOfBirth,\n                        },\n                    });\n\n                    if (response.data?.register) {\n                        history.push('/login');\n                        setSubmitting(false);\n                        resetForm();\n                    } else {\n                        setErrorMessage('User with that email already exists.');\n                        setSubmitting(false);\n                    }\n                }}\n            >\n                {({ isSubmitting }) => (\n                    <div className={classes.root}>\n                        <Form onChange={() => setErrorMessage('')}>\n                            <div className={classes.alignedFormContent}>\n                                <FormTextField\n                                    className={classes.alignedFormField}\n                                    name=\"firstName\"\n                                    placeholder=\"First name\"\n                                    type=\"input\"\n                                />\n                                <div className={classes.spacer} />\n                                <FormTextField\n                                    className={classes.alignedFormField}\n                                    name=\"lastName\"\n                                    placeholder=\"Last name\"\n                                    type=\"input\"\n                                />\n                            </div>\n                            <div>\n                                <div className={classes.alignedFormContent}>\n                                    <FormTextField\n                                        className={classes.alignedFormField}\n                                        name=\"streetAddres\"\n                                        placeholder=\"Street address\"\n                                        type=\"input\"\n                                    />\n                                    <div className={classes.spacer} />\n                                    <FormTextField\n                                        className={classes.alignedFormField}\n                                        name=\"postCode\"\n                                        placeholder=\"Post code\"\n                                        type=\"input\"\n                                    />\n                                </div>\n                                <div className={classes.alignedFormContent}>\n                                    <FormTextField\n                                        className={classes.alignedFormField}\n                                        name=\"city\"\n                                        placeholder=\"City\"\n                                        type=\"input\"\n                                    />\n                                    <div className={classes.spacer} />\n                                    <FormTextField\n                                        className={classes.alignedFormField}\n                                        name=\"country\"\n                                        placeholder=\"Country\"\n                                        type=\"input\"\n                                    />\n                                </div>\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"email\"\n                                    placeholder=\"Email\"\n                                    type=\"input\"\n                                />\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"password\"\n                                    placeholder=\"Password\"\n                                    type=\"password\"\n                                />\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"confirmPassword\"\n                                    placeholder=\"Confirm password\"\n                                    type=\"password\"\n                                />\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"dateOfBirth\"\n                                    type=\"date\"\n                                />\n                            </div>\n                            <div className={classes.formButton}>\n                                <ThemeProvider theme={theme}>\n                                    <Button\n                                        className={classes.formButton}\n                                        disabled={isSubmitting}\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        type=\"submit\"\n                                    >\n                                        Sign Up\n                                    </Button>\n                                </ThemeProvider>\n                            </div>\n                            <div className={classes.loginText}>\n                                <p>\n                                    Already have an account? <a href=\"/login\">Login here.</a>\n                                </p>\n                            </div>\n                        </Form>\n                    </div>\n                )}\n            </Formik>\n        </div>\n    );\n};\n","import * as yup from 'yup';\n\nexport const loginValidationSchema = yup.object({\n    email: yup\n        .string()\n        .email()\n        .required('Email is required'),\n    password: yup.lazy(value =>\n        !value\n            ? yup.string()\n            : yup\n                  .string()\n                  .min(6, 'Password must be at least 6 characters')\n                  .required('Password is required'),\n    ),\n});\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useLoginStyles = makeStyles({\n    root: {\n        margin: '0 auto',\n        top: '25%',\n        height: '100%',\n        width: '348px',\n    },\n    headerText: {\n        textAlign: 'center',\n        fontWeight: 'bold',\n    },\n    formField: {\n        width: '100%',\n        marginTop: 12,\n    },\n    formButton: {\n        marginTop: 12,\n        textTransform: 'none',\n        fontWeight: 'bold',\n        letterSpacing: 1,\n        textAlign: 'center',\n    },\n    registerText: {\n        marginTop: 12,\n    },\n});\n","import React, { useState } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport {\n    useLoginMutation,\n    MeDocument,\n    MeQuery,\n    LoginMutationVariables,\n    LoginMutation,\n} from '../../generated/graphql';\nimport { setAccessToken } from '../../utils/accessToken';\nimport { Formik, Form } from 'formik';\nimport { FormTextField } from '../Forms/FormTextField';\nimport { Button, ThemeProvider } from '@material-ui/core';\nimport { theme } from '../../utils/theme';\nimport { loginValidationSchema } from '../../schemas /loginValidationSchema';\nimport { ErrorMessage } from '../Alerts/AlertMessage';\nimport { useLoginStyles } from './Login.style';\nimport { MutationTuple } from '@apollo/react-hooks';\nimport { ExecutionResult } from 'graphql';\n\nexport const Login: React.FC<RouteComponentProps> = ({ history }) => {\n    const [login]: MutationTuple<LoginMutation, LoginMutationVariables> = useLoginMutation();\n    const [errorMessage, setErrorMessage] = useState<string>('');\n    const classes = useLoginStyles();\n\n    return (\n        <div className={classes.root}>\n            <div>\n                <h1 className={classes.headerText}>Login</h1>\n            </div>\n            {errorMessage.length > 0 && (\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\n                    <ErrorMessage message={errorMessage} />\n                </div>\n            )}\n            <Formik\n                initialValues={{ email: '', password: '' }}\n                validationSchema={loginValidationSchema}\n                onSubmit={async (data, { setSubmitting, resetForm }) => {\n                    setSubmitting(true);\n\n                    try {\n                        const response: ExecutionResult<LoginMutation> = await login({\n                            variables: {\n                                email: data.email,\n                                password: data.password,\n                            },\n                            update: (store, { data }) => {\n                                if (!data) {\n                                    return null;\n                                }\n                                store.writeQuery<MeQuery>({\n                                    query: MeDocument,\n                                    data: {\n                                        me: data.login.user,\n                                    },\n                                });\n                            },\n                        });\n\n                        if (response && response.data) {\n                            setAccessToken(response.data.login.accessToken);\n                            history.push('/accounts');\n                            setSubmitting(false);\n                            resetForm();\n                        }\n                    } catch (error) {\n                        const errorMessage: string = error.message.split(':')[1];\n                        setErrorMessage(errorMessage);\n                        setSubmitting(false);\n                    }\n                }}\n            >\n                {({ isSubmitting }) => (\n                    <div>\n                        <Form>\n                            <div>\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"email\"\n                                    placeholder=\"Email\"\n                                    type=\"input\"\n                                />\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"password\"\n                                    placeholder=\"Password\"\n                                    type=\"password\"\n                                />\n                            </div>\n                            <div className={classes.formButton}>\n                                <ThemeProvider theme={theme}>\n                                    <Button\n                                        className={classes.formButton}\n                                        disabled={isSubmitting}\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        type=\"submit\"\n                                    >\n                                        Login\n                                    </Button>\n                                </ThemeProvider>\n                            </div>\n                            <div className={classes.registerText}>\n                                <p>\n                                    Don't have an account? <a href=\"/register\">Sign up here.</a>\n                                </p>\n                            </div>\n                        </Form>\n                    </div>\n                )}\n            </Formik>\n        </div>\n    );\n};\n","import React from 'react';\nimport {\n    ResponsiveContainer,\n    AreaChart,\n    Area,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n} from 'recharts';\nimport { useTransactionsQuery, TransactionsQueryResult } from '../../generated/graphql';\n\ninterface ChartProps {\n    currency: string;\n}\n\nexport const Chart: React.FC<ChartProps> = ({ currency }) => {\n    const { data }: TransactionsQueryResult = useTransactionsQuery({\n        variables: { currency: currency },\n    });\n\n    return (\n        <>\n            <div style={{ width: '100%', height: '320px' }}>\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\n                    Spending (this month)\n                </div>\n                <ResponsiveContainer width=\"100%\">\n                    <AreaChart\n                        data={\n                            !!data\n                                ? data.transactions.map(transaction => {\n                                      return {\n                                          date: new Date(\n                                              Date.parse(transaction.date),\n                                          ).toLocaleDateString(),\n                                          type: transaction.transactionType,\n                                          amount: transaction.amount,\n                                      };\n                                  })\n                                : []\n                        }\n                        margin={{\n                            top: 24,\n                            right: 30,\n                            left: 20,\n                            bottom: 5,\n                        }}\n                    >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"date\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Legend />\n                        <Area type=\"monotone\" dataKey=\"amount\" stroke=\"#29AABB\" fill=\"#29AABB\" />\n                        <Area type=\"monotone\" dataKey=\"type\" stroke=\"#F15742\" />\n                    </AreaChart>\n                </ResponsiveContainer>\n            </div>\n        </>\n    );\n};\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { ColorScheme } from '../../utils/theme';\n\ninterface TitleProps {\n    title: string;\n    fontSize: number;\n}\n\nexport const Title: React.FC<TitleProps> = (props: TitleProps) => {\n    return (\n        <Typography\n            style={{ fontWeight: 'bold', fontSize: props.fontSize, color: ColorScheme.PRIMARY }}\n        >\n            {props.title}\n        </Typography>\n    );\n};\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref4 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref5 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref6 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref7 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref8 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref9 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref10 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref11 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref12 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref13 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref14 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref15 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref16 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar SvgWorld = function SvgWorld(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 512 512\",\n    style: {\n      enableBackground: \"new 0 0 512 512\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, React.createElement(\"circle\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    cx: 256,\n    cy: 256,\n    r: 256\n  }), React.createElement(\"g\", null, React.createElement(\"polygon\", {\n    style: {\n      fill: \"#FFDA44\"\n    },\n    points: \"256.001,100.174 264.29,125.683 291.11,125.683 269.411,141.448 277.7,166.957  256.001,151.191 234.301,166.957 242.59,141.448 220.891,125.683 247.712,125.683  \"\n  }), React.createElement(\"polygon\", {\n    style: {\n      fill: \"#FFDA44\"\n    },\n    points: \"145.814,145.814 169.714,157.99 188.679,139.026 184.482,165.516 208.381,177.693  181.89,181.889 177.694,208.381 165.517,184.482 139.027,188.679 157.992,169.714  \"\n  }), React.createElement(\"polygon\", {\n    style: {\n      fill: \"#FFDA44\"\n    },\n    points: \"100.175,256 125.684,247.711 125.684,220.89 141.448,242.59 166.958,234.301 151.191,256  166.958,277.699 141.448,269.411 125.684,291.11 125.684,264.289  \"\n  }), React.createElement(\"polygon\", {\n    style: {\n      fill: \"#FFDA44\"\n    },\n    points: \"145.814,366.186 157.991,342.286 139.027,323.321 165.518,327.519 177.693,303.62  181.89,330.111 208.38,334.307 184.484,346.484 188.679,372.974 169.714,354.009  \"\n  }), React.createElement(\"polygon\", {\n    style: {\n      fill: \"#FFDA44\"\n    },\n    points: \"256.001,411.826 247.711,386.317 220.891,386.317 242.591,370.552 234.301,345.045  256.001,360.809 277.7,345.045 269.411,370.552 291.11,386.317 264.289,386.317  \"\n  }), React.createElement(\"polygon\", {\n    style: {\n      fill: \"#FFDA44\"\n    },\n    points: \"366.187,366.186 342.288,354.01 323.322,372.975 327.519,346.483 303.622,334.307  330.112,330.111 334.308,303.62 346.484,327.519 372.974,323.321 354.009,342.288  \"\n  }), React.createElement(\"polygon\", {\n    style: {\n      fill: \"#FFDA44\"\n    },\n    points: \"411.826,256 386.317,264.289 386.317,291.11 370.552,269.41 345.045,277.699 360.81,256  345.045,234.301 370.553,242.59 386.317,220.89 386.317,247.712  \"\n  }), React.createElement(\"polygon\", {\n    style: {\n      fill: \"#FFDA44\"\n    },\n    points: \"366.187,145.814 354.01,169.714 372.975,188.679 346.483,184.481 334.308,208.38  330.112,181.889 303.622,177.692 327.519,165.516 323.322,139.027 342.289,157.991  \"\n  })), _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgWorld, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/world.7aea52bb.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref4 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref5 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref6 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref7 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref8 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref9 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref10 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref11 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref12 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref13 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref14 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref15 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref16 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar SvgFlag = function SvgFlag(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 512 512\",\n    style: {\n      enableBackground: \"new 0 0 512 512\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, React.createElement(\"circle\", {\n    style: {\n      fill: \"#F0F0F0\"\n    },\n    cx: 256,\n    cy: 256,\n    r: 256\n  }), React.createElement(\"g\", null, React.createElement(\"path\", {\n    style: {\n      fill: \"#D80027\"\n    },\n    d: \"M244.87,256H512c0-23.106-3.08-45.49-8.819-66.783H244.87V256z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#D80027\"\n    },\n    d: \"M244.87,122.435h229.556c-15.671-25.572-35.708-48.175-59.07-66.783H244.87V122.435z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#D80027\"\n    },\n    d: \"M256,512c60.249,0,115.626-20.824,159.356-55.652H96.644C140.374,491.176,195.751,512,256,512z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#D80027\"\n    },\n    d: \"M37.574,389.565h436.852c12.581-20.529,22.338-42.969,28.755-66.783H8.819 C15.236,346.596,24.993,369.036,37.574,389.565z\"\n  })), React.createElement(\"path\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    d: \"M118.584,39.978h23.329l-21.7,15.765l8.289,25.509l-21.699-15.765L85.104,81.252l7.16-22.037 C73.158,75.13,56.412,93.776,42.612,114.552h7.475l-13.813,10.035c-2.152,3.59-4.216,7.237-6.194,10.938l6.596,20.301l-12.306-8.941 c-3.059,6.481-5.857,13.108-8.372,19.873l7.267,22.368h26.822l-21.7,15.765l8.289,25.509l-21.699-15.765l-12.998,9.444 C0.678,234.537,0,245.189,0,256h256c0-141.384,0-158.052,0-256C205.428,0,158.285,14.67,118.584,39.978z M128.502,230.4 l-21.699-15.765L85.104,230.4l8.289-25.509l-21.7-15.765h26.822l8.288-25.509l8.288,25.509h26.822l-21.7,15.765L128.502,230.4z  M120.213,130.317l8.289,25.509l-21.699-15.765l-21.699,15.765l8.289-25.509l-21.7-15.765h26.822l8.288-25.509l8.288,25.509h26.822 L120.213,130.317z M220.328,230.4l-21.699-15.765L176.93,230.4l8.289-25.509l-21.7-15.765h26.822l8.288-25.509l8.288,25.509h26.822 l-21.7,15.765L220.328,230.4z M212.039,130.317l8.289,25.509l-21.699-15.765l-21.699,15.765l8.289-25.509l-21.7-15.765h26.822 l8.288-25.509l8.288,25.509h26.822L212.039,130.317z M212.039,55.743l8.289,25.509l-21.699-15.765L176.93,81.252l8.289-25.509 l-21.7-15.765h26.822l8.288-25.509l8.288,25.509h26.822L212.039,55.743z\"\n  }), _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgFlag, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/flag.36ab476e.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref4 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref5 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref6 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref7 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref8 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref9 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref10 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref11 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref12 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref13 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref14 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref15 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar _ref16 =\n/*#__PURE__*/\nReact.createElement(\"g\", null);\n\nvar SvgUk = function SvgUk(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 512 512\",\n    style: {\n      enableBackground: \"new 0 0 512 512\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, React.createElement(\"circle\", {\n    style: {\n      fill: \"#F0F0F0\"\n    },\n    cx: 256,\n    cy: 256,\n    r: 256\n  }), React.createElement(\"g\", null, React.createElement(\"path\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    d: \"M52.92,100.142c-20.109,26.163-35.272,56.318-44.101,89.077h133.178L52.92,100.142z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    d: \"M503.181,189.219c-8.829-32.758-23.993-62.913-44.101-89.076l-89.075,89.076H503.181z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    d: \"M8.819,322.784c8.83,32.758,23.993,62.913,44.101,89.075l89.074-89.075L8.819,322.784L8.819,322.784 z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    d: \"M411.858,52.921c-26.163-20.109-56.317-35.272-89.076-44.102v133.177L411.858,52.921z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    d: \"M100.142,459.079c26.163,20.109,56.318,35.272,89.076,44.102V370.005L100.142,459.079z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    d: \"M189.217,8.819c-32.758,8.83-62.913,23.993-89.075,44.101l89.075,89.075V8.819z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    d: \"M322.783,503.181c32.758-8.83,62.913-23.993,89.075-44.101l-89.075-89.075V503.181z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#0052B4\"\n    },\n    d: \"M370.005,322.784l89.075,89.076c20.108-26.162,35.272-56.318,44.101-89.076H370.005z\"\n  })), React.createElement(\"g\", null, React.createElement(\"path\", {\n    style: {\n      fill: \"#D80027\"\n    },\n    d: \"M509.833,222.609h-220.44h-0.001V2.167C278.461,0.744,267.317,0,256,0 c-11.319,0-22.461,0.744-33.391,2.167v220.44v0.001H2.167C0.744,233.539,0,244.683,0,256c0,11.319,0.744,22.461,2.167,33.391 h220.44h0.001v220.442C233.539,511.256,244.681,512,256,512c11.317,0,22.461-0.743,33.391-2.167v-220.44v-0.001h220.442 C511.256,278.461,512,267.319,512,256C512,244.683,511.256,233.539,509.833,222.609z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#D80027\"\n    },\n    d: \"M322.783,322.784L322.783,322.784L437.019,437.02c5.254-5.252,10.266-10.743,15.048-16.435 l-97.802-97.802h-31.482V322.784z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#D80027\"\n    },\n    d: \"M189.217,322.784h-0.002L74.98,437.019c5.252,5.254,10.743,10.266,16.435,15.048l97.802-97.804 V322.784z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#D80027\"\n    },\n    d: \"M189.217,189.219v-0.002L74.981,74.98c-5.254,5.252-10.266,10.743-15.048,16.435l97.803,97.803 H189.217z\"\n  }), React.createElement(\"path\", {\n    style: {\n      fill: \"#D80027\"\n    },\n    d: \"M322.783,189.219L322.783,189.219L437.02,74.981c-5.252-5.254-10.743-10.266-16.435-15.047 l-97.802,97.803V189.219z\"\n  })), _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgUk, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/uk.e5564902.svg\";\nexport { ForwardRef as ReactComponent };","export enum Currency {\n    EURO = 'EUR',\n    POUND = 'GBP',\n    DOLLAR = 'USD',\n    BITCOIN = 'BTC',\n}\n","import { makeStyles } from '@material-ui/core';\n\nexport const useAccountsStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n    },\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        fontWeight: 'bold',\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n        borderRadius: 8,\n    },\n    fixedHeight: {\n        height: 240,\n    },\n    accountCardHeight: {\n        height: 172,\n    },\n    chart: {\n        height: '100%',\n    },\n}));\n","import React, { MouseEvent } from 'react';\nimport { IconButton, Typography, Divider, Button, ThemeProvider } from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport AddIcon from '@material-ui/icons/Add';\nimport { Title } from '../Typography/Title';\nimport { ColorScheme, theme } from '../../utils/theme';\n\ninterface AccountsCardProps {\n    svg: any | string;\n    currencyIcon: string;\n    fullCurrencyText: string;\n    balance: number;\n    iban: string;\n    onAccountClicked(e: MouseEvent<HTMLButtonElement>): void;\n}\n\ninterface NoAccountCardProps {\n    onCreateNewAccountClicked(e: MouseEvent<HTMLButtonElement>): void;\n}\n\nexport const AccountsCard: React.FC<AccountsCardProps> = ({\n    svg,\n    currencyIcon,\n    fullCurrencyText,\n    balance,\n    iban,\n    onAccountClicked,\n}) => {\n    return (\n        <>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'center',\n                }}\n            >\n                <div style={{ width: 32 }}>\n                    {!!svg ? (\n                        svg\n                    ) : (\n                        <img\n                            src=\"https://upload.wikimedia.org/wikipedia/commons/4/46/Bitcoin.svg\"\n                            alt=\"...\"\n                            style={{ width: 32 }}\n                        />\n                    )}\n                </div>\n                <Title title={fullCurrencyText} fontSize={18} />\n                <div>\n                    <IconButton style={{ color: ColorScheme.PRIMARY }} onClick={onAccountClicked}>\n                        <NavigateNextIcon fontSize=\"small\" />\n                    </IconButton>\n                </div>\n            </div>\n            <Typography style={{ margin: '0 auto', marginTop: '24px' }} component=\"p\" variant=\"h4\">\n                {currencyIcon}\n                {balance}\n            </Typography>\n            <Divider style={{ marginTop: 24 }} light />\n            <Typography\n                style={{\n                    marginTop: '14px',\n                    letterSpacing: 1,\n                    color: 'rgba(0, 0, 0, 0.3)',\n                }}\n                component=\"p\"\n            >\n                {!!iban ? iban : 'XXXX APL0 0099 YYYY ZZZZ 78'}\n            </Typography>\n        </>\n    );\n};\n\nexport const NoAccountsCard: React.FC<NoAccountCardProps> = ({ onCreateNewAccountClicked }) => {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                marginTop: '62px',\n                justifyContent: 'center',\n            }}\n        >\n            <ThemeProvider theme={theme}>\n                <Button\n                    style={{ fontWeight: 'bold', textTransform: 'none', letterSpacing: 1 }}\n                    color=\"primary\"\n                    variant=\"contained\"\n                    startIcon={<AddIcon />}\n                    onClick={onCreateNewAccountClicked}\n                >\n                    Create new account\n                </Button>\n            </ThemeProvider>\n        </div>\n    );\n};\n","import React from 'react';\nimport { createUseStyles } from 'react-jss';\n\nconst useDialogStyles = createUseStyles({\n    dialog: {\n        width: '500px',\n        maxWidth: '100%',\n        margin: '0 auto',\n        position: 'fixed',\n        left: '50%',\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n        zIndex: 999,\n        backgroundColor: '#eee',\n        padding: '10px 20px 40px',\n        borderRadius: '8px',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    closeButton: {\n        marginBottom: '15px',\n        padding: '3px 8px',\n        cursor: 'pointer',\n        borderRadius: '50%',\n        border: 'none',\n        width: '30px',\n        height: '30px',\n        fontWeight: 'bold',\n        alignSelf: 'flex-end',\n    },\n});\n\ninterface DialogProps {\n    isOpen: boolean;\n    onClose: any;\n}\n\nexport const Dialog: React.FC<DialogProps> = ({ children, isOpen, onClose }) => {\n    const classes = useDialogStyles();\n\n    let dialog: JSX.Element | undefined = (\n        <div className={classes.dialog}>\n            <button className={classes.closeButton} onClick={onClose}>\n                x\n            </button>\n            {children}\n        </div>\n    );\n\n    if (!isOpen) {\n        dialog = undefined;\n    }\n    return <div>{dialog}</div>;\n};\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"defs\", null, React.createElement(\"style\", null, \".a{opacity:0;}.b{fill:#fff;}.c{fill:#ff5f00;}.d{fill:#eb001b;}.e{fill:#f79e1b;}\"));\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"title\", null, \"Asset 1\");\n\nvar _ref4 =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  className: \"a\"\n}, React.createElement(\"rect\", {\n  className: \"b\",\n  width: 131.39,\n  height: 86.9\n}));\n\nvar _ref5 =\n/*#__PURE__*/\nReact.createElement(\"rect\", {\n  className: \"c\",\n  x: 48.37,\n  y: 15.14,\n  width: 34.66,\n  height: 56.61\n});\n\nvar _ref6 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  className: \"d\",\n  d: \"M51.94,43.45a35.94,35.94,0,0,1,13.75-28.3,36,36,0,1,0,0,56.61A35.94,35.94,0,0,1,51.94,43.45Z\"\n});\n\nvar _ref7 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  className: \"e\",\n  d: \"M120.5,65.76V64.6H121v-.24h-1.19v.24h.47v1.16Zm2.31,0v-1.4h-.36l-.42,1-.42-1h-.36v1.4h.26V64.7l.39.91h.27l.39-.91v1.06Z\"\n});\n\nvar _ref8 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  className: \"e\",\n  d: \"M123.94,43.45a36,36,0,0,1-58.25,28.3,36,36,0,0,0,0-56.61,36,36,0,0,1,58.25,28.3Z\"\n});\n\nvar SvgMcSymbol = function SvgMcSymbol(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 131.39 86.9\",\n    ref: svgRef\n  }, props), _ref2, title === undefined ? _ref3 : title ? React.createElement(\"title\", null, title) : null, _ref4, _ref5, _ref6, _ref7, _ref8);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgMcSymbol, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/mc_symbol.543bc93b.svg\";\nexport { ForwardRef as ReactComponent };","import React, { MouseEvent } from 'react';\nimport { ThemeProvider, Button } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport { theme } from '../../utils/theme';\nimport { ReactComponent as MasterCard } from '../../assets/mc_symbol.svg';\n\ninterface ApolloCardProps {\n    cardNumber?: string;\n    validThru?: string;\n    cvv?: number;\n    onCreateNewCardClicked?(e: MouseEvent<HTMLButtonElement>): void;\n}\n\nexport const ApolloCard: React.FC<ApolloCardProps> = ({ cardNumber, validThru, cvv }) => {\n    return (\n        <>\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                <div>\n                    <span role=\"img\" aria-label=\"logo\">\n                        🚀\n                    </span>\n                </div>\n                <div style={{ fontSize: 18, letterSpacing: 2 }}>{cardNumber}</div>\n                <div style={{ width: 64 }}>\n                    <MasterCard />\n                </div>\n            </div>\n            <div>\n                <div style={{ textTransform: 'uppercase', letterSpacing: 0.5 }}>valid thru: </div>\n                <div>{validThru}</div>\n            </div>\n            <div>\n                <div style={{ textTransform: 'uppercase', letterSpacing: 0.5 }}>cvv</div>\n                <div>{cvv}</div>\n            </div>\n        </>\n    );\n};\n\nexport const NoApolloCard: React.FC<ApolloCardProps> = ({ onCreateNewCardClicked }) => {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                marginTop: '62px',\n                justifyContent: 'center',\n            }}\n        >\n            <ThemeProvider theme={theme}>\n                <Button\n                    style={{ fontWeight: 'bold', textTransform: 'none', letterSpacing: 1 }}\n                    color=\"primary\"\n                    variant=\"contained\"\n                    startIcon={<AddIcon />}\n                    onClick={onCreateNewCardClicked}\n                >\n                    Create new card\n                </Button>\n            </ThemeProvider>\n        </div>\n    );\n};\n","import React, { useState, useEffect, MouseEvent, ChangeEvent } from 'react';\nimport {\n    Container,\n    Grid,\n    Paper,\n    List,\n    ListItemText,\n    ListItem,\n    ListItemIcon,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    ThemeProvider,\n} from '@material-ui/core';\nimport { Chart } from '../Charts/Chart';\nimport { Title } from '../Typography/Title';\nimport { ReactComponent as Euro } from '../../assets/world.svg';\nimport { ReactComponent as Dollar } from '../../assets/flag.svg';\nimport { ReactComponent as Pound } from '../../assets/uk.svg';\nimport {\n    useAccountsQuery,\n    useCreateAccountMutation,\n    AccountsDocument,\n    useCreateCardMutation,\n    useCardsQuery,\n    CardsDocument,\n    AccountsQueryResult,\n    CardsQueryResult,\n    CreateAccountMutation,\n    CreateAccountMutationVariables,\n    CreateCardMutation,\n    CreateCardMutationVariables,\n    Account,\n} from '../../generated/graphql';\nimport { Loading } from '../Loading/Loading';\nimport { useHistory } from 'react-router-dom';\nimport { useAccountsStyles } from './styles/Accounts.style';\nimport { AccountsCard, NoAccountsCard } from '../cards/AccountsCard';\nimport { Currency } from '../../utils/currencies';\nimport { Dialog } from '../Dialog/Dialog';\nimport { NoApolloCard, ApolloCard } from '../cards/ApolloCard';\nimport { MutationTuple } from '@apollo/react-hooks';\nimport { ExecutionResult } from 'graphql';\nimport { theme } from '../../utils/theme';\n\nconst currencies: string[] = ['EUR', 'USD', 'GBP'];\n\nexport const Accounts: React.FC = () => {\n    const { data, loading }: AccountsQueryResult = useAccountsQuery();\n    const cards: CardsQueryResult = useCardsQuery();\n    const [createAccount]: MutationTuple<\n        CreateAccountMutation,\n        CreateAccountMutationVariables\n    > = useCreateAccountMutation();\n    const [createCard]: MutationTuple<\n        CreateCardMutation,\n        CreateCardMutationVariables\n    > = useCreateCardMutation();\n\n    const [analyticsAccount, setAnalyticsAccount] = useState<string>('EUR');\n    const [totalBalance, setTotalBalance] = useState<number>(0);\n    const [openDialog, setOpenDialog] = useState<boolean>(false);\n\n    const history = useHistory();\n\n    const classes = useAccountsStyles();\n\n    const accountCardHeightPaper = classes.paper + ' ' + classes.accountCardHeight;\n    const chartPaper = classes.paper + ' ' + classes.chart;\n\n    useEffect(() => {\n        let balance = 0;\n        if (data) {\n            data.accounts.forEach((account: Account) => {\n                balance += account.balance;\n            });\n            setAnalyticsAccount(data.accounts[0].currency);\n        }\n        setTotalBalance(balance);\n    }, [loading, data]);\n\n    if (!data) {\n        return <Loading />;\n    }\n\n    const determineCurrencyIcon = (c: string): JSX.Element | undefined => {\n        switch (c) {\n            case 'EUR':\n                return <Euro />;\n            case 'USD':\n                return <Dollar />;\n            case 'GBP':\n                return <Pound />;\n            case 'BTC':\n                return (\n                    <img\n                        src=\"https://upload.wikimedia.org/wikipedia/commons/4/46/Bitcoin.svg\"\n                        alt=\"...\"\n                        style={{ width: 32 }}\n                    />\n                );\n        }\n        return undefined;\n    };\n\n    const renderDialog = (): JSX.Element => {\n        return (\n            <Dialog isOpen={openDialog} onClose={() => setOpenDialog(false)}>\n                <List>\n                    {currencies.map((currency: string, index: number) => (\n                        <ListItem\n                            button\n                            key={currency}\n                            onClick={async () => {\n                                try {\n                                    const response: ExecutionResult<CreateAccountMutation> = await createAccount(\n                                        {\n                                            variables: {\n                                                currency: currency,\n                                            },\n                                            refetchQueries: [\n                                                {\n                                                    query: AccountsDocument,\n                                                    variables: {},\n                                                },\n                                                {\n                                                    query: CardsDocument,\n                                                    variables: {},\n                                                },\n                                            ],\n                                        },\n                                    );\n\n                                    if (response && response.data) {\n                                        setAnalyticsAccount(currency);\n                                        setOpenDialog(false);\n                                    }\n                                } catch (error) {\n                                    const errorMessage: string = error.message.split(':')[1];\n                                    console.log(errorMessage);\n                                }\n                            }}\n                        >\n                            <ListItemIcon>\n                                <div style={{ width: 32 }}>{determineCurrencyIcon(currency)}</div>\n                            </ListItemIcon>\n                            <ListItemText primary={currency} />\n                        </ListItem>\n                    ))}\n                </List>\n            </Dialog>\n        );\n    };\n\n    const handleAccountClicked = (e: MouseEvent<HTMLButtonElement>, account: Account): void => {\n        e.preventDefault();\n        history.push({\n            pathname: `/accounts/${account.id}`,\n            state: account,\n        });\n    };\n\n    const handleCreateNewCardClicked = async (e: MouseEvent<HTMLButtonElement>): Promise<void> => {\n        e.preventDefault();\n\n        try {\n            const response: ExecutionResult<CreateCardMutation> = await createCard({\n                variables: {},\n                refetchQueries: [\n                    {\n                        query: CardsDocument,\n                        variables: {},\n                    },\n                ],\n            });\n\n            if (response && response.data) {\n                console.log('Card successfully created!');\n            }\n        } catch (error) {\n            const errorMessage: string = error.message.split(':')[1];\n            console.log(errorMessage);\n        }\n    };\n\n    const renderNoAccountsCard = (): JSX.Element => {\n        return (\n            <>\n                <Grid item xs={12} md={4} lg={4}>\n                    <Paper className={accountCardHeightPaper}>\n                        <NoAccountsCard\n                            onCreateNewAccountClicked={(e: MouseEvent<HTMLButtonElement>) => {\n                                e.preventDefault();\n                                setOpenDialog(true);\n                            }}\n                        />\n                    </Paper>\n                </Grid>\n            </>\n        );\n    };\n\n    const renderNoApolloCard = (): JSX.Element => {\n        return (\n            <>\n                <Grid item xs={12} md={4} lg={4}>\n                    <Paper className={accountCardHeightPaper}>\n                        <NoApolloCard\n                            onCreateNewCardClicked={(e: MouseEvent<HTMLButtonElement>) => {\n                                handleCreateNewCardClicked(e);\n                            }}\n                        />\n                    </Paper>\n                </Grid>\n            </>\n        );\n    };\n\n    return (\n        <div className={classes.root}>\n            {renderDialog()}\n            <main className={classes.content}>\n                <Container maxWidth=\"lg\" className={classes.container}>\n                    <div\n                        style={{\n                            marginBottom: 12,\n                            display: 'flex',\n                            justifyContent: 'space-between',\n                        }}\n                    >\n                        <div>\n                            <Title title=\"Analytics\" fontSize={24} />\n                        </div>\n                    </div>\n                    <ThemeProvider theme={theme}>\n                        <FormControl>\n                            <InputLabel id=\"select-filled-label\">Account</InputLabel>\n                            <Select\n                                labelId=\"select-filled-label\"\n                                id=\"select-filled\"\n                                value={analyticsAccount}\n                                onChange={(event: ChangeEvent<{ value: unknown }>) =>\n                                    setAnalyticsAccount(event.target.value as string)\n                                }\n                                label=\"Account\"\n                            >\n                                <MenuItem value=\"\">\n                                    <em>None</em>\n                                </MenuItem>\n                                {currencies.map(currency => {\n                                    return (\n                                        <MenuItem key={currency} value={currency}>\n                                            {currency}\n                                        </MenuItem>\n                                    );\n                                })}\n                            </Select>\n                        </FormControl>\n                    </ThemeProvider>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12} md={12} lg={12}>\n                            <Paper className={chartPaper}>\n                                <Chart currency={!!analyticsAccount ? analyticsAccount : 'EUR'} />\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Container>\n                <Container maxWidth=\"lg\" className={classes.container}>\n                    <div\n                        style={{\n                            marginBottom: 12,\n                            marginTop: 12,\n                            display: 'flex',\n                            justifyContent: 'space-between',\n                        }}\n                    >\n                        <div>\n                            <Title title=\"Accounts\" fontSize={24} />\n                        </div>\n                        <div\n                            style={{\n                                fontSize: 18,\n                                fontWeight: 'bold',\n                                color: 'rgba(0, 0, 0, 0.3)',\n                            }}\n                        >\n                            Total balance: £{totalBalance}\n                        </div>\n                    </div>\n                    <Grid container spacing={3}>\n                        {data.accounts.length > 0 &&\n                            data.accounts.map(account => {\n                                let svg: any | string;\n                                let currencyIcon: string = '';\n                                let fullCurrencyText: string = '';\n\n                                switch (account.currency) {\n                                    case Currency.EURO:\n                                        svg = <Euro />;\n                                        currencyIcon = '€';\n                                        fullCurrencyText = 'Euro';\n                                        break;\n                                    case Currency.DOLLAR:\n                                        svg = <Dollar />;\n                                        currencyIcon = '$';\n                                        fullCurrencyText = 'US Dollar';\n                                        break;\n                                    case Currency.POUND:\n                                        svg = <Pound />;\n                                        currencyIcon = '£';\n                                        fullCurrencyText = 'British Pound';\n                                        break;\n                                    case Currency.BITCOIN:\n                                        svg = '';\n                                        currencyIcon = '฿';\n                                        fullCurrencyText = 'Bitcoin';\n                                        break;\n                                }\n                                return (\n                                    <Grid key={account.id} item xs={12} md={4} lg={4}>\n                                        <Paper className={accountCardHeightPaper}>\n                                            <AccountsCard\n                                                svg={svg}\n                                                currencyIcon={currencyIcon}\n                                                fullCurrencyText={fullCurrencyText}\n                                                balance={account.balance}\n                                                iban={account.iban}\n                                                onAccountClicked={(\n                                                    e: MouseEvent<HTMLButtonElement>,\n                                                ) => handleAccountClicked(e, account)}\n                                            />\n                                        </Paper>\n                                    </Grid>\n                                );\n                            })}\n                        {data.accounts.length <= 2 && renderNoAccountsCard()}\n                    </Grid>\n                </Container>\n                <Container maxWidth=\"lg\" className={classes.container}>\n                    <div style={{ marginBottom: 12 }}>\n                        <Title title=\"Cards\" fontSize={24} />\n                    </div>\n                    <Grid container spacing={3}>\n                        {cards.data &&\n                            cards.data.cards &&\n                            cards.data.cards.length > 0 &&\n                            cards.data.cards.map(card => {\n                                return (\n                                    <Grid key={card.id} item xs={12} md={4} lg={4}>\n                                        <Paper className={accountCardHeightPaper}>\n                                            <ApolloCard\n                                                cardNumber={card.cardNumber}\n                                                validThru={\n                                                    new Date(\n                                                        Date.parse(card.expiresIn),\n                                                    ).getMonth() +\n                                                    '/' +\n                                                    new Date(Date.parse(card.expiresIn))\n                                                        .getFullYear()\n                                                        .toString()\n                                                        .substr(-2)\n                                                }\n                                                cvv={card.cvv}\n                                            />\n                                        </Paper>\n                                    </Grid>\n                                );\n                            })}\n                        {cards.data && cards.data.cards.length <= 2 && renderNoApolloCard()}\n                    </Grid>\n                </Container>\n            </main>\n        </div>\n    );\n};\n","import { makeStyles } from '@material-ui/core';\nimport { ColorScheme } from '../../../utils/theme';\n\nexport const useAccountStyles = makeStyles({\n    root: {\n        margin: '0 auto',\n        marginTop: 24,\n    },\n    accountBalance: {\n        fontSize: 28,\n        textAlign: 'center',\n    },\n    accountInfo: {\n        display: 'flex',\n        justifyContent: 'space-evenly',\n        width: '240px',\n        margin: '0 auto',\n        marginTop: 12,\n        alignItems: 'center',\n    },\n    accountButtonsSection: {\n        textAlign: 'center',\n        display: 'flex',\n        justifyContent: 'space-evenly',\n        alignItems: 'center',\n        margin: '0 auto',\n        width: '480px',\n        marginTop: 24,\n    },\n    accountButton: {\n        backgroundColor: ColorScheme.PRIMARY,\n        color: ColorScheme.WHITE,\n        width: 32,\n        height: 32,\n    },\n    accountButtonSection: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    accountButtonText: {\n        marginTop: 12,\n        fontSize: 14,\n    },\n    transactions: {\n        marginTop: 12,\n        margin: '0 auto',\n        display: 'flex',\n        flexDirection: 'column',\n        width: 480,\n    },\n    transactionsHeader: {\n        marginTop: 12,\n        display: 'flex',\n    },\n    transactionCards: {\n        marginTop: 8,\n    },\n    dialogButton: {\n        marginTop: 12,\n        textTransform: 'none',\n        fontWeight: 'bold',\n        letterSpacing: 1,\n        textAlign: 'center',\n    },\n});\n","import { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\nexport const useTransactionCardStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {},\n        expand: {\n            transform: 'rotate(0deg)',\n            marginLeft: 'auto',\n            transition: theme.transitions.create('transform', {\n                duration: theme.transitions.duration.shortest,\n            }),\n        },\n        expandOpen: {\n            transform: 'rotate(180deg)',\n        },\n        expandedText: {\n            fontSize: 14,\n            marginBottom: 8,\n        },\n    }),\n);\n","import React, { useState } from 'react';\nimport {\n    Avatar,\n    Card,\n    CardHeader,\n    Collapse,\n    CardContent,\n    IconButton,\n    CardActions,\n    ThemeProvider,\n} from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { theme } from '../../utils/theme';\nimport { useTransactionCardStyles } from '../styles/cards/TransactionCard.style';\n\ninterface TransactionCardProps {\n    title: string;\n    amount: string;\n    time: string;\n    card?: string;\n    fee?: number;\n    currencyIcon?: string;\n}\n\nexport const TransactionCard: React.FC<TransactionCardProps> = ({\n    title,\n    time,\n    amount,\n    card,\n    fee,\n    currencyIcon,\n}) => {\n    const classes = useTransactionCardStyles();\n    const [expanded, setExpanded] = useState(false);\n\n    const handleExpandClick = () => {\n        setExpanded(!expanded);\n    };\n\n    return (\n        <div style={{ marginTop: 12 }}>\n            <Card className={classes.root}>\n                <CardHeader\n                    avatar={<Avatar aria-label=\"whatever\">R</Avatar>}\n                    title={title}\n                    subheader={time}\n                    style={{ textAlign: 'left' }}\n                />\n                <CardActions style={{ marginTop: '-40px' }}>\n                    <ThemeProvider theme={theme}>\n                        <IconButton\n                            style={{ marginLeft: 420 }}\n                            color=\"primary\"\n                            onClick={handleExpandClick}\n                            aria-expanded={expanded}\n                            aria-label=\"show more\"\n                        >\n                            <ExpandMoreIcon />\n                        </IconButton>\n                    </ThemeProvider>\n                </CardActions>\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                    <CardContent style={{ marginTop: '-24px' }}>\n                        <hr\n                            style={{\n                                border: 'none',\n                                borderBottom: `1px solid black`,\n                            }}\n                        />\n                        <div className={classes.expandedText} style={{ marginTop: 12 }}>\n                            Apollo card: <span style={{ color: 'black' }}>{card}</span>\n                        </div>\n                        <div className={classes.expandedText}>\n                            Amount:{' '}\n                            <span style={{ color: 'black' }}>\n                                {currencyIcon}\n                                {amount}\n                            </span>\n                        </div>\n                        <div className={classes.expandedText}>\n                            Fee: <span style={{ color: 'black' }}>{fee}</span>\n                        </div>\n                    </CardContent>\n                </Collapse>\n            </Card>\n        </div>\n    );\n};\n","import React from 'react';\nimport {\n    CardsQueryResult,\n    useCardsQuery,\n    TransactionsQuery,\n    Transaction,\n} from '../../generated/graphql';\nimport { useAccountStyles } from '../Accounts/styles/Account.style';\nimport { Loading } from '../Loading/Loading';\nimport { TransactionCard } from '../cards/TransactionCard';\n\ninterface TransactionProps {\n    account: TransactionsQuery | undefined;\n    currencyIcon?: string;\n}\n\nexport const Transactions: React.FC<TransactionProps> = ({ account, currencyIcon }) => {\n    const { data }: CardsQueryResult = useCardsQuery();\n    const classes = useAccountStyles();\n\n    if (!account) {\n        return <Loading />;\n    }\n\n    return (\n        <div>\n            <div className={classes.transactions}>\n                <div className={classes.transactionsHeader}></div>\n                <div className={classes.transactionCards}>\n                    {account.transactions.length > 0 &&\n                        account.transactions.map((transaction: Transaction) => {\n                            return (\n                                <TransactionCard\n                                    key={transaction.id}\n                                    title={transaction.transactionType}\n                                    time={new Date(\n                                        Date.parse(transaction.date),\n                                    ).toLocaleDateString()}\n                                    card={!!data ? data.cards[0].cardNumber : undefined}\n                                    fee={0}\n                                    amount={transaction.amount}\n                                    currencyIcon={currencyIcon}\n                                />\n                            );\n                        })}\n                </div>\n            </div>\n        </div>\n    );\n};\n","import * as yup from 'yup';\n\nexport const addMoneyValidationSchema = yup.object({\n    amount: yup\n        .number()\n        .required()\n        .positive('Amount must be a positive number')\n        .integer(),\n});\n","import React, { useState, MouseEvent, useEffect, ChangeEvent } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport {\n    ThemeProvider,\n    IconButton,\n    Button,\n    InputLabel,\n    FormControl,\n    Select,\n    MenuItem,\n} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport SwapVert from '@material-ui/icons/SwapVert';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { ReactComponent as Euro } from '../../assets/world.svg';\nimport { ReactComponent as Dollar } from '../../assets/flag.svg';\nimport { ReactComponent as Pound } from '../../assets/uk.svg';\nimport { theme } from '../../utils/theme';\nimport { useAccountStyles } from './styles/Account.style';\nimport {\n    useCreateTransactionMutation,\n    useTransactionsQuery,\n    TransactionsDocument,\n    useAddMoneyMutation,\n    useMeQuery,\n    CreateTransactionMutation,\n    CreateTransactionMutationVariables,\n    AddMoneyMutation,\n    AddMoneyMutationVariables,\n    TransactionsQueryResult,\n    MeQueryResult,\n    useAccountQuery,\n    ExchangeMutation,\n    ExchangeMutationVariables,\n    useExchangeMutation,\n    AccountQueryResult,\n} from '../../generated/graphql';\nimport { Dialog } from '../Dialog/Dialog';\nimport { FormTextField } from '../Forms/FormTextField';\nimport { Form, Formik } from 'formik';\nimport { Title } from '../Typography/Title';\nimport { MutationTuple } from '@apollo/react-hooks';\nimport { ExecutionResult } from 'graphql';\nimport { ExecutionResultDataDefault } from 'graphql/execution/execute';\nimport { Transactions } from '../Transactions/Transactions';\nimport { ErrorMessage, SuccessMessage } from '../Alerts/AlertMessage';\nimport { addMoneyValidationSchema } from '../../schemas /addMoneyValidationSchema';\n\nconst currencies: string[] = ['EUR', 'USD', 'GBP'];\n\nexport const Account: React.FC = () => {\n    const location = useLocation<any>();\n    const [toAccountCurrency, setToAccountCurrency] = useState<string>('');\n    const [accountBalance, setAccountBalance] = useState<number>(0);\n    const [openAddDialog, setOpenAddDialog] = useState<boolean>(false);\n    const [openExchangeDialog, setOpenExchangeDialog] = useState<boolean>(false);\n    const [openDetailsDialog, setOpenDetailsDialog] = useState<boolean>(false);\n    const [successMessage, setSuccessMessage] = useState<string>('');\n    const [errorMessage, setErrorMessage] = useState<string>('');\n\n    // GraphQL Mutations\n    const [createTransaction]: MutationTuple<\n        CreateTransactionMutation,\n        CreateTransactionMutationVariables\n    > = useCreateTransactionMutation();\n    const [addMoney]: MutationTuple<\n        AddMoneyMutation,\n        AddMoneyMutationVariables\n    > = useAddMoneyMutation();\n    const [exchange]: MutationTuple<\n        ExchangeMutation,\n        ExchangeMutationVariables\n    > = useExchangeMutation();\n\n    // GraphQL Queries\n    const user: MeQueryResult = useMeQuery();\n    const account: AccountQueryResult = useAccountQuery({\n        variables: { currency: location.state.currency },\n    });\n    const { data }: TransactionsQueryResult = useTransactionsQuery({\n        variables: { currency: location.state.currency },\n    });\n\n    const classes = useAccountStyles();\n\n    let currencyIcon: string = '';\n    let currencyFullText: string = '';\n    let svg: any | string;\n\n    // On component mounts fetch the account balance\n    useEffect(() => {\n        if (account.data) {\n            setAccountBalance(account.data.account.balance);\n        } else {\n            setAccountBalance(location.state.balance);\n        }\n    }, [account, location]);\n\n    switch (location.state.currency) {\n        case 'EUR':\n            currencyIcon = '€';\n            currencyFullText = 'Euro';\n            svg = <Euro />;\n            break;\n        case 'USD':\n            currencyIcon = '$';\n            currencyFullText = 'US Dollar';\n            svg = <Dollar />;\n            break;\n        case 'GBP':\n            currencyIcon = '£';\n            currencyFullText = 'British Pound';\n            svg = <Pound />;\n            break;\n        case 'BTC':\n            currencyIcon = '฿';\n            currencyFullText = 'Bitcoin';\n            svg = undefined;\n            break;\n    }\n\n    const simulate = async (): Promise<void> => {\n        try {\n            const response: ExecutionResult<ExecutionResultDataDefault> = await createTransaction({\n                variables: {\n                    currency: location.state.currency,\n                },\n                refetchQueries: [\n                    {\n                        query: TransactionsDocument,\n                        variables: {\n                            currency: location.state.currency,\n                        },\n                    },\n                ],\n            });\n            if (response && response.data) {\n                // Update the account balance\n                setAccountBalance(response.data.createTransaction);\n            }\n        } catch (error) {\n            const errorMessage: string = error.message.split(':')[1];\n            console.log(errorMessage);\n        }\n    };\n\n    const renderAddDialog = () => {\n        return (\n            <Dialog isOpen={openAddDialog} onClose={() => setOpenAddDialog(false)}>\n                <Title title=\"Add money\" fontSize={18} />\n                <div style={{ marginTop: 12 }}>\n                    <Formik\n                        initialValues={{ amount: 10 }}\n                        validationSchema={addMoneyValidationSchema}\n                        onSubmit={async (data, { setSubmitting, resetForm }) => {\n                            setSubmitting(true);\n\n                            try {\n                                const response = await addMoney({\n                                    variables: {\n                                        amount: data.amount,\n                                        currency: location.state.currency,\n                                    },\n                                });\n\n                                if (response && response.data) {\n                                    setSubmitting(false);\n                                    setSuccessMessage('Successfully topped up your account');\n                                    setOpenAddDialog(false);\n                                    resetForm();\n                                }\n                            } catch (error) {\n                                const errorMessage = error.message.split(':')[1];\n                                setErrorMessage(errorMessage);\n                                setSubmitting(false);\n                            }\n                        }}\n                    >\n                        {({ isSubmitting }) => (\n                            <div>\n                                <Form>\n                                    <FormTextField\n                                        name=\"amount\"\n                                        placeholder=\"amount\"\n                                        type=\"number\"\n                                    />\n                                    <div>\n                                        <ThemeProvider theme={theme}>\n                                            <Button\n                                                className={classes.dialogButton}\n                                                disabled={isSubmitting}\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                type=\"submit\"\n                                            >\n                                                Add money\n                                            </Button>\n                                        </ThemeProvider>\n                                    </div>\n                                </Form>\n                            </div>\n                        )}\n                    </Formik>\n                </div>\n            </Dialog>\n        );\n    };\n\n    const renderExchangeDialog = (): JSX.Element => {\n        return (\n            <Dialog isOpen={openExchangeDialog} onClose={() => setOpenExchangeDialog(false)}>\n                <Title title=\"Exchange\" fontSize={18} />\n                <div style={{ marginTop: 12 }}>\n                    <Formik\n                        initialValues={{ amount: 10 }}\n                        onSubmit={async (data, { setSubmitting, resetForm }) => {\n                            setSubmitting(true);\n\n                            try {\n                                const response = await exchange({\n                                    variables: {\n                                        selectedAccountCurrency: location.state.currency,\n                                        toAccountCurrency: toAccountCurrency,\n                                        amount: data.amount,\n                                    },\n                                });\n\n                                if (response && response.data) {\n                                    // if the exchange was a success update the account balance and render a success message\n                                    if (response.data.exchange.success) {\n                                        setSubmitting(false);\n                                        setSuccessMessage('The exchange was successfully executed');\n                                        setOpenExchangeDialog(false);\n                                        resetForm();\n                                    }\n                                }\n                            } catch (error) {\n                                const errorMessage = error.message.split('')[1];\n                                setErrorMessage(errorMessage);\n\n                                setSubmitting(false);\n                            }\n                        }}\n                    >\n                        {({ isSubmitting }) => (\n                            <div>\n                                <Form>\n                                    <FormTextField\n                                        name=\"amount\"\n                                        placeholder=\"amount\"\n                                        type=\"number\"\n                                    />\n                                    <FormControl style={{ marginLeft: 8 }} variant=\"outlined\">\n                                        <InputLabel id=\"select-filled-label\">To</InputLabel>\n                                        <Select\n                                            labelId=\"select-filled-label\"\n                                            id=\"select-filled\"\n                                            value={toAccountCurrency}\n                                            onChange={(event: ChangeEvent<{ value: unknown }>) => {\n                                                setToAccountCurrency(event.target.value as string);\n                                            }}\n                                            label=\"To\"\n                                        >\n                                            <MenuItem value=\"\">\n                                                <em>None</em>\n                                            </MenuItem>\n                                            {currencies\n                                                .filter(currency => {\n                                                    return currency !== location.state.currency;\n                                                })\n                                                .map(currency => {\n                                                    return (\n                                                        <MenuItem value={currency}>\n                                                            {currency}\n                                                        </MenuItem>\n                                                    );\n                                                })}\n                                        </Select>\n                                    </FormControl>\n                                    <div>\n                                        <ThemeProvider theme={theme}>\n                                            <Button\n                                                className={classes.dialogButton}\n                                                disabled={isSubmitting}\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                type=\"submit\"\n                                            >\n                                                Exchange\n                                            </Button>\n                                        </ThemeProvider>\n                                    </div>\n                                </Form>\n                            </div>\n                        )}\n                    </Formik>\n                </div>\n            </Dialog>\n        );\n    };\n\n    const renderDetailsDialog = (): JSX.Element | undefined => {\n        if (user && user.data && user.data.me) {\n            return (\n                <Dialog isOpen={openDetailsDialog} onClose={() => setOpenDetailsDialog(false)}>\n                    Beneficiary: {user.data.me.firstName} {user.data.me.lastName} <br />\n                    IBAN: {location.state.iban} <br />\n                    BIC: {location.state.bic}\n                </Dialog>\n            );\n        }\n    };\n\n    const renderAlertMessage = (): JSX.Element | undefined => {\n        if (successMessage.length > 0) {\n            return (\n                <div style={{ display: 'flex', justifyContent: 'center', marginBottom: 12 }}>\n                    <SuccessMessage message={successMessage} />\n                </div>\n            );\n        } else if (errorMessage.length > 0) {\n            return (\n                <div>\n                    <ErrorMessage message={errorMessage} />\n                </div>\n            );\n        }\n    };\n\n    return (\n        <div className={classes.root}>\n            {renderAddDialog()}\n            {renderExchangeDialog()}\n            {renderDetailsDialog()}\n            {renderAlertMessage()}\n\n            <div style={{ position: 'absolute', right: 20 }}>\n                <ThemeProvider theme={theme}>\n                    <Button\n                        color=\"secondary\"\n                        variant=\"contained\"\n                        style={{\n                            fontWeight: 'bold',\n                            letterSpacing: 1,\n                            textTransform: 'none',\n                        }}\n                        onClick={() => simulate()}\n                    >\n                        Simulate\n                    </Button>\n                </ThemeProvider>\n            </div>\n            <div className={classes.accountBalance}>\n                {currencyIcon}\n                {accountBalance}\n            </div>\n            <div className={classes.accountInfo}>\n                <div>{currencyFullText}</div>\n                <div style={{ width: 32 }}>\n                    {!!svg ? (\n                        svg\n                    ) : (\n                        <img\n                            src=\"https://upload.wikimedia.org/wikipedia/commons/4/46/Bitcoin.svg\"\n                            alt=\"...\"\n                            style={{ width: 32 }}\n                        />\n                    )}\n                </div>\n                <div>{location.state.currency}</div>\n            </div>\n\n            <div className={classes.accountButtonsSection}>\n                <ThemeProvider theme={theme}>\n                    <div>\n                        <IconButton\n                            className={classes.accountButton}\n                            aria-label=\"Add\"\n                            onClick={e => {\n                                e.preventDefault();\n                                setOpenAddDialog(true);\n                            }}\n                        >\n                            <AddIcon />\n                        </IconButton>\n                        <div className={classes.accountButtonText}>Add money</div>\n                    </div>\n                    <div>\n                        <IconButton\n                            className={classes.accountButton}\n                            aria-label=\"Exchange\"\n                            onClick={(e: MouseEvent<HTMLButtonElement>) => {\n                                e.preventDefault();\n                                setOpenExchangeDialog(true);\n                            }}\n                        >\n                            <SwapVert />\n                        </IconButton>\n                        <div className={classes.accountButtonText}>Exchange</div>\n                    </div>\n                    <div>\n                        <IconButton\n                            className={classes.accountButton}\n                            aria-label=\"Details\"\n                            onClick={(e: MouseEvent<HTMLButtonElement>) => {\n                                e.preventDefault();\n                                setOpenDetailsDialog(true);\n                            }}\n                        >\n                            <InfoOutlinedIcon />\n                        </IconButton>\n                        <div className={classes.accountButtonText}>Details</div>\n                    </div>\n                </ThemeProvider>\n            </div>\n            <hr style={{ width: 480, marginTop: 24, color: '#fcfcfc' }} />\n            <Transactions account={data} currencyIcon={currencyIcon} />\n        </div>\n    );\n};\n","import { createUseStyles } from 'react-jss';\nimport { ColorScheme } from '../../utils/theme';\n\nexport const useToolbarStyles = createUseStyles({\n    toolbar: {\n        // position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '56px',\n        backgroundColor: ColorScheme.PRIMARY,\n    },\n    navigation: {\n        display: 'flex',\n        height: '100%',\n        alignItems: 'center',\n        padding: '0 1rem',\n    },\n    logo: {\n        textTransform: 'uppercase',\n        letterSpacing: 2,\n        marginLeft: '1.5rem',\n        '& a': {\n            color: ColorScheme.WHITE,\n            textDecoration: 'none',\n            fontSize: '1.5rem',\n        },\n    },\n    toggleButton: {},\n    navigationItems: {\n        '& ul': {\n            listStyle: 'none',\n            margin: 0,\n            padding: 0,\n            display: 'flex',\n            alignItems: 'center',\n        },\n        '& li': {\n            padding: '0 0.5rem',\n        },\n        '& a': {\n            color: ColorScheme.WHITE,\n            letterSpacing: 1,\n            textDecoration: 'none',\n            fontWeight: 'bold',\n        },\n        '& a:hover': {\n            color: ColorScheme.SECONDARY,\n        },\n        '& a:active': {\n            color: ColorScheme.SECONDARY,\n        },\n    },\n    navButton: {\n        fontSize: 14,\n        fontWeight: 'bold',\n        letterSpacing: 1,\n        marginLeft: '1rem',\n        height: 32,\n        width: 102,\n        borderRadius: 4,\n        border: 'none',\n        backgroundColor: ColorScheme.SECONDARY,\n        color: ColorScheme.WHITE,\n        cursor: 'pointer',\n        '&:hover': {\n            backgroundColor: ColorScheme.HOVER,\n        },\n        '&:focus': {\n            outline: 0,\n        },\n    },\n    spacer: {\n        flex: 1,\n    },\n    '@media (max-width: 768px)': {\n        navigationItems: {\n            display: 'none',\n        },\n    },\n    '@media (min-width: 769px)': {\n        toggleButton: {\n            display: 'none',\n        },\n        logo: {\n            marginLeft: 0,\n        },\n    },\n});\n","import { createUseStyles } from 'react-jss';\n\nexport const useDrawerToggleButtonStyles = createUseStyles({\n    toggleButton: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-around',\n        height: '24px',\n        width: '28px',\n        background: 'transparent',\n        cursor: 'pointer',\n        padding: 0,\n        border: 'none',\n        boxSizing: 'border-box',\n        '& :focus': {\n            outline: 'none',\n        },\n    },\n    toggleButtonLine: {\n        width: '30px',\n        height: '2px',\n        background: 'white',\n    },\n});\n","import React from 'react';\nimport { useDrawerToggleButtonStyles } from './DrawerToggleButton.style';\n\ninterface DrawerToggleButtonProps {\n    click(): void;\n}\n\nexport const DrawerToggleButton: React.FC<DrawerToggleButtonProps> = (\n    props: DrawerToggleButtonProps,\n) => {\n    const classes = useDrawerToggleButtonStyles();\n\n    return (\n        <button className={classes.toggleButton} onClick={props.click}>\n            <div className={classes.toggleButtonLine} />\n            <div className={classes.toggleButtonLine} />\n            <div className={classes.toggleButtonLine} />\n        </button>\n    );\n};\n","import React, { useState, useEffect, MouseEvent } from 'react';\nimport { useToolbarStyles } from './Toolbar.style';\nimport { DrawerToggleButton } from '../SideDrawer/DrawerToggleButton';\nimport {\n    useMeQuery,\n    useLogoutMutation,\n    MeQueryResult,\n    LogoutMutation,\n    LogoutMutationVariables,\n} from '../../generated/graphql';\nimport { useHistory } from 'react-router-dom';\nimport { setAccessToken } from '../../utils/accessToken';\nimport { MutationTuple } from '@apollo/react-hooks';\n\ninterface ToolbarProps {\n    drawerClickHandler(): void;\n}\n\nconst navigationItems: string[] = ['Accounts', 'Insights'];\n\nexport const Toolbar: React.FC<ToolbarProps> = (props: ToolbarProps) => {\n    const { data, loading }: MeQueryResult = useMeQuery();\n    const [logout, { client }]: MutationTuple<\n        LogoutMutation,\n        LogoutMutationVariables\n    > = useLogoutMutation();\n    const [showAuthUserButtons, setShowAuthUserButtons] = useState<boolean>(false);\n\n    const history = useHistory();\n    const classes = useToolbarStyles();\n\n    useEffect(() => {\n        if (!loading && data && data.me) {\n            setShowAuthUserButtons(true);\n        } else {\n            setShowAuthUserButtons(false);\n        }\n    }, [data, loading]);\n\n    const renderAuthUserButtons = (): JSX.Element => {\n        return (\n            <>\n                {navigationItems.map((item: string) => {\n                    let routeTo: string = '/';\n\n                    switch (item) {\n                        case 'Accounts':\n                            routeTo = '/accounts';\n                            break;\n                        case 'Insights':\n                            routeTo = '/';\n                            break;\n                    }\n                    return (\n                        <li key={item}>\n                            <a href={routeTo}>{item}</a>\n                        </li>\n                    );\n                })}\n                <button\n                    className={classes.navButton}\n                    onClick={async e => {\n                        e.preventDefault();\n                        await logout().then(() => history.push('/'));\n                        setAccessToken('');\n                        await client!.resetStore();\n                    }}\n                >\n                    Logout\n                </button>\n            </>\n        );\n    };\n\n    const renderNonAuthUserButtons = (): JSX.Element => {\n        return (\n            <>\n                <button\n                    className={classes.navButton}\n                    onClick={e => {\n                        e.preventDefault();\n                        history.push('/login');\n                    }}\n                >\n                    Login\n                </button>\n                <button\n                    className={classes.navButton}\n                    onClick={(e: MouseEvent<HTMLButtonElement>) => {\n                        e.preventDefault();\n                        history.push('/register');\n                    }}\n                >\n                    Sign Up\n                </button>\n            </>\n        );\n    };\n\n    return (\n        <header className={classes.toolbar}>\n            <nav className={classes.navigation}>\n                <div className={classes.toggleButton}>\n                    <DrawerToggleButton click={props.drawerClickHandler} />\n                </div>\n                <div className={classes.logo}>\n                    <a href=\"/\">\n                        <span role=\"img\" aria-label=\"logo\">\n                            🚀\n                        </span>\n                    </a>\n                </div>\n                <div className={classes.spacer} />\n                <div className={classes.navigationItems}>\n                    <ul>\n                        {!!showAuthUserButtons\n                            ? renderAuthUserButtons()\n                            : renderNonAuthUserButtons()}\n                    </ul>\n                </div>\n            </nav>\n        </header>\n    );\n};\n","import { createUseStyles } from 'react-jss';\nimport { ColorScheme } from '../../utils/theme';\n\nexport const useSideDrawerStyles = createUseStyles({\n    siderDrawer: {\n        height: '100%',\n        background: ColorScheme.WHITE,\n        boxShadow: '1px 0 7px rgba(0,0,0,0.5)',\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '70%',\n        maxWidth: '280px',\n        zIndex: 200,\n        transform: 'translateX(-100%)',\n        transition: 'transform 0.3s ease-out',\n        '& ul': {\n            height: '100%',\n            listStyle: 'none',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n        },\n        '& li': {\n            margin: '0.5rem 0',\n        },\n        '& a': {\n            color: ColorScheme.PRIMARY,\n            textDecoration: 'none',\n            fontSize: '1.2rem',\n        },\n        '& a:hover': {\n            color: ColorScheme.ORANGE,\n        },\n        '& a:active': {\n            color: ColorScheme.ORANGE,\n        },\n    },\n    open: {\n        transform: 'translateX(0)',\n    },\n    '@media (min-width: 769px)': {\n        siderDrawer: {\n            display: 'none',\n        },\n    },\n});\n","import React, { useState, useEffect, MouseEvent } from 'react';\nimport { useSideDrawerStyles } from './SideDrawer.style';\nimport {\n    useMeQuery,\n    useLogoutMutation,\n    MeQueryResult,\n    LogoutMutationVariables,\n    LogoutMutation,\n} from '../../generated/graphql';\nimport { useHistory } from 'react-router-dom';\nimport { setAccessToken } from '../../utils/accessToken';\nimport { MutationTuple } from '@apollo/react-hooks';\n\nconst authUserNavigationItems: string[] = ['Accounts', 'Insights', 'Logout'];\nconst nonAuthUserNavigationItems: string[] = ['Login', 'Sign Up'];\n\ninterface SideDrawerProps {\n    show: boolean;\n}\n\nexport const SideDrawer: React.FC<SideDrawerProps> = (props: SideDrawerProps) => {\n    const { data, loading }: MeQueryResult = useMeQuery();\n    const [logout, { client }]: MutationTuple<\n        LogoutMutation,\n        LogoutMutationVariables\n    > = useLogoutMutation();\n    const [showAuthUserNavigationItems, setShowAuthUserNavigationItems] = useState<boolean>(false);\n\n    const history = useHistory();\n    const classes = useSideDrawerStyles();\n\n    useEffect(() => {\n        if (!loading && data && data.me) {\n            setShowAuthUserNavigationItems(true);\n        } else {\n            setShowAuthUserNavigationItems(false);\n        }\n    }, [data, loading]);\n\n    let drawerClasses: string = classes.siderDrawer;\n\n    if (props.show) {\n        drawerClasses = classes.siderDrawer + ' ' + classes.open;\n    }\n\n    const renderAuthUserNavigationItems = (): JSX.Element => {\n        return (\n            <>\n                {authUserNavigationItems.map(item => {\n                    let routeTo: string = '/';\n                    let logOutClicked: boolean = false;\n\n                    switch (item) {\n                        case 'Accounts':\n                            routeTo = '/accounts';\n                            break;\n                        case 'Insights':\n                            routeTo = '/';\n                            break;\n                        case 'Logout':\n                            logOutClicked = true;\n                            break;\n                    }\n\n                    return (\n                        <li key={item}>\n                            <a\n                                href=\"/whatevs\"\n                                onClick={async (e: MouseEvent<Element, globalThis.MouseEvent>) => {\n                                    e.preventDefault();\n                                    if (logOutClicked) {\n                                        await logout().then(() => history.push('/'));\n                                        setAccessToken('');\n                                        await client!.resetStore();\n                                    }\n                                    history.push(routeTo);\n                                }}\n                            >\n                                {item}\n                            </a>\n                        </li>\n                    );\n                })}\n            </>\n        );\n    };\n\n    const renderNonAuthUserNavigationItems = (): JSX.Element => {\n        return (\n            <>\n                {nonAuthUserNavigationItems.map((item: string) => {\n                    let routeTo: string = '/';\n\n                    switch (item) {\n                        case 'Login':\n                            routeTo = '/login';\n                            break;\n                        case 'Sign Up':\n                            routeTo = '/register';\n                            break;\n                    }\n\n                    return (\n                        <li key={item}>\n                            <a\n                                href=\"/whatevs\"\n                                onClick={(\n                                    e: MouseEvent<HTMLAnchorElement, globalThis.MouseEvent>,\n                                ) => {\n                                    e.preventDefault();\n                                    history.push(routeTo);\n                                }}\n                            >\n                                {item}\n                            </a>\n                        </li>\n                    );\n                })}\n            </>\n        );\n    };\n\n    return (\n        <nav className={drawerClasses}>\n            <ul>\n                {!!showAuthUserNavigationItems\n                    ? renderAuthUserNavigationItems()\n                    : renderNonAuthUserNavigationItems()}\n            </ul>\n        </nav>\n    );\n};\n","import { createUseStyles } from 'react-jss';\n\nexport const useBackdropStyles = createUseStyles({\n    backdrop: {\n        position: 'fixed',\n        width: '100%',\n        height: '100%',\n        top: 0,\n        left: 0,\n        background: 'rgba(0,0,0,0.3)',\n        zIndex: 100,\n    },\n});\n","import React from 'react';\nimport { useBackdropStyles } from './Backdrop.style';\n\ninterface BackdropProps {\n    click(): void;\n}\n\nexport const Backdrop: React.FC<BackdropProps> = (props: BackdropProps) => {\n    const classes = useBackdropStyles();\n\n    return <div className={classes.backdrop} onClick={props.click} />;\n};\n","import React, { ComponentType, useState } from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { Home } from './pages/Home';\nimport { Register } from './components/Register/Register';\nimport { Login } from './components/Login/Login';\nimport { Accounts } from './components/Accounts/Accounts';\nimport { getAccessToken } from './utils/accessToken';\nimport { Account } from './components/Accounts/Account';\nimport { Toolbar } from './components/Toolbar/Toolbar';\nimport { SideDrawer } from './components/SideDrawer/SideDrawer';\nimport { Backdrop } from './components/Backdrop/Backdrop';\nimport { ColorScheme } from './utils/theme';\n\ninterface AuthenticatedRouteProps {\n    exact?: boolean;\n    path: string;\n    component: ComponentType<any>;\n}\n\nconst AuthenticatedRoute = ({ component: Component, ...rest }: AuthenticatedRouteProps) => (\n    <Route\n        {...rest}\n        render={props =>\n            getAccessToken() ? <Component {...props} /> : <Redirect to={{ pathname: '/login' }} />\n        }\n    />\n);\n\nconst LoggedInRoute = ({ component: Component, ...rest }: AuthenticatedRouteProps) => (\n    <Route\n        {...rest}\n        render={props =>\n            getAccessToken() ? (\n                <Redirect to={{ pathname: '/accounts' }} />\n            ) : (\n                <Component {...props} />\n            )\n        }\n    />\n);\n\nexport const Routes: React.FC = () => {\n    const [sideDrawerOpen, setSideDrawerOpen] = useState(false);\n\n    let backdrop: any;\n\n    const drawerToggleClickHandler = () => {\n        setSideDrawerOpen(true);\n    };\n\n    const backdropClickHandler = () => {\n        setSideDrawerOpen(false);\n    };\n\n    if (sideDrawerOpen) {\n        backdrop = <Backdrop click={backdropClickHandler} />;\n    }\n\n    return (\n        <>\n            <Helmet>\n                <style>{`body { background-color: ${ColorScheme.WHITE}; }`}</style>\n            </Helmet>\n            <BrowserRouter>\n                <div style={{ height: '100%' }}>\n                    <Toolbar drawerClickHandler={drawerToggleClickHandler} />\n                    <SideDrawer show={sideDrawerOpen} />\n                    {backdrop}\n                    <main style={{ marginTop: 24 }}>\n                        <Switch>\n                            <Route exact path=\"/\" component={Home} />\n                            <LoggedInRoute exact path=\"/register\" component={Register} />\n                            <LoggedInRoute exact path=\"/login\" component={Login} />\n                            <AuthenticatedRoute exact path=\"/accounts\" component={Accounts} />\n                            <AuthenticatedRoute exact path=\"/accounts/:id\" component={Account} />\n                            <Route\n                                path=\"/\"\n                                render={() => (\n                                    <div\n                                        style={{\n                                            display: 'flex',\n                                            justifyContent: 'center',\n                                            marginTop: 12,\n                                        }}\n                                    >\n                                        404 Not Found\n                                    </div>\n                                )}\n                            />\n                        </Switch>\n                    </main>\n                </div>\n            </BrowserRouter>\n        </>\n    );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { getAccessToken, setAccessToken } from './utils/accessToken';\nimport { TokenRefreshLink } from 'apollo-link-token-refresh';\nimport jwtDecode from 'jwt-decode';\nimport { App } from './App';\n\nconst cache = new InMemoryCache({});\n\nconst requestLink = new ApolloLink(\n    (operation, forward) =>\n        new Observable(observer => {\n            let handle: any;\n            Promise.resolve(operation)\n                .then(operation => {\n                    const accessToken = getAccessToken();\n                    operation.setContext({\n                        headers: {\n                            authorization: accessToken ? `Bearer ${accessToken}` : '',\n                        },\n                    });\n                })\n                .then(() => {\n                    handle = forward(operation).subscribe({\n                        next: observer.next.bind(observer),\n                        error: observer.error.bind(observer),\n                        complete: observer.complete.bind(observer),\n                    });\n                })\n                .catch(observer.error.bind(observer));\n\n            return () => {\n                if (handle) handle.unsubscribe();\n            };\n        }),\n);\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        new TokenRefreshLink({\n            accessTokenField: 'accessToken',\n            isTokenValidOrUndefined: () => {\n                const token = getAccessToken();\n\n                if (!token) {\n                    return true;\n                }\n\n                try {\n                    const { exp } = jwtDecode(token);\n                    if (Date.now() >= exp * 1000) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } catch {\n                    return false;\n                }\n            },\n            fetchAccessToken: () => {\n                return fetch((process.env.REACT_APP_SERVER_URL as string) + '/refresh_token', {\n                    method: 'POST',\n                    credentials: 'include',\n                });\n            },\n            handleFetch: accessToken => {\n                setAccessToken(accessToken);\n            },\n            handleError: err => {\n                console.warn('Your refresh token is invalid. Try to relogin');\n                console.error(err);\n            },\n        }),\n        onError(({ graphQLErrors, networkError }) => {\n            console.log(graphQLErrors);\n            console.log(networkError);\n        }),\n        requestLink,\n        new HttpLink({\n            uri: process.env.REACT_APP_SERVER_URL + '/graphql',\n            credentials: 'include',\n        }),\n    ]),\n    cache,\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n    document.getElementById('root'),\n);\n","import React, { useState, useEffect } from 'react';\nimport { Routes } from './Routes';\nimport { setAccessToken } from './utils/accessToken';\nimport { Loading } from './components/Loading/Loading';\n\nexport const App: React.FC = () => {\n    const [loading, setLoading] = useState<boolean>(true);\n\n    useEffect(() => {\n        fetch((process.env.REACT_APP_SERVER_URL as string) + '/refresh_token', {\n            method: 'POST',\n            credentials: 'include',\n        }).then(async res => {\n            const { accessToken } = await res.json();\n            setAccessToken(accessToken);\n            setLoading(false);\n        });\n    }, []);\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    return <Routes />;\n};\n"],"sourceRoot":""}
{"version":3,"sources":["accessToken.ts","generated/graphql.tsx","components/Loading.tsx","theme.ts","pages/Home.tsx","schemas /registerValidationSchema.ts","components/FormTextField.tsx","components/AlertMessage.tsx","pages/Register.tsx","schemas /loginValidationSchema.ts","pages/Login.tsx","components/Header.tsx","pages/Accounts.tsx","Routes.tsx","index.tsx","App.tsx"],"names":["accessToken","getAccessToken","setAccessToken","token","AccountsDocument","gql","CreateAccountDocument","LoginDocument","LogoutDocument","MeDocument","RegisterDocument","UsersDocument","ColorScheme","Loading","style","display","justifyContent","src","alt","height","Home","baseOptions","data","fetchPolicy","ApolloReactHooks","users","map","x","key","id","email","firstName","lastName","theme","createMuiTheme","palette","primary","main","PRIMARY","contrastThreshold","tonalOffset","registerValidationSchema","yup","required","streetAddres","postCode","city","country","password","value","min","confirmPassword","oneOf","dateOfBirth","FormTextField","placeholder","className","type","props","useField","field","meta","errorText","error","touched","ThemeProvider","CssBaseline","TextField","variant","helperText","AlertMessage","message","Alert","severity","useStyles","makeStyles","headerText","textAlign","root","width","margin","alignedFormContent","marginTop","alignedFormField","marginRight","formField","formButton","loginText","margintop","Register","history","register","useState","alertMessage","setAlertMessage","classes","length","initialValues","validationSchema","onSubmit","a","setSubmitting","resetForm","variables","streetAddress","response","push","isSubmitting","onChange","name","Button","disabled","color","href","loginValidationSchema","registerText","Login","login","update","store","writeQuery","query","me","user","errorMessage","split","flexGrow","title","Header","loading","useLogoutMutation","logout","client","showAuthUserButtons","setShowAuthUserButtons","useHistory","useEffect","AppBar","position","Toolbar","Typography","onClick","e","preventDefault","then","resetStore","alignItems","textalign","flexDirection","newAccountButton","right","Accounts","useCreateAccountMutation","createAccount","currency","refetchQueries","console","log","accounts","account","balance","AuthenticatedRoute","Component","component","rest","render","to","pathname","LoggedInRoute","Routes","Helmet","exact","path","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","headers","authorization","subscribe","next","bind","complete","catch","unsubscribe","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","exp","jwtDecode","Date","now","fetchAccessToken","fetch","method","credentials","handleFetch","handleError","err","warn","onError","graphQLErrors","networkError","HttpLink","uri","ReactDOM","setLoading","res","json","document","getElementById"],"mappings":"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","file":"static/js/main.82d58eb6.chunk.js","sourcesContent":["export let accessToken = '';\n\nexport const getAccessToken = () => {\n    return accessToken;\n};\n\nexport const setAccessToken = (token: string) => {\n    accessToken = token;\n};\n","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n};\n\nexport type Account = {\n   __typename?: 'Account',\n  id: Scalars['Int'],\n  currency: Scalars['String'],\n  balance: Scalars['Float'],\n};\n\nexport type LoginResponse = {\n   __typename?: 'LoginResponse',\n  accessToken: Scalars['String'],\n  user: User,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  logout: Scalars['Boolean'],\n  revokeRefreshTokensForUser: Scalars['Boolean'],\n  login: LoginResponse,\n  register: Scalars['Boolean'],\n  createAccount: Scalars['Boolean'],\n};\n\n\nexport type MutationRevokeRefreshTokensForUserArgs = {\n  userId: Scalars['Int']\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'],\n  email: Scalars['String']\n};\n\n\nexport type MutationRegisterArgs = {\n  country: Scalars['String'],\n  city: Scalars['String'],\n  postCode: Scalars['String'],\n  streetAddress: Scalars['String'],\n  dateOfBirth: Scalars['String'],\n  lastName: Scalars['String'],\n  firsName: Scalars['String'],\n  password: Scalars['String'],\n  email: Scalars['String']\n};\n\n\nexport type MutationCreateAccountArgs = {\n  currency: Scalars['String']\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  hello: Scalars['String'],\n  bye: Scalars['String'],\n  users: Array<User>,\n  me?: Maybe<User>,\n  accounts: Array<Account>,\n};\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['Int'],\n  email: Scalars['String'],\n  firstName: Scalars['String'],\n  lastName: Scalars['String'],\n};\n\nexport type AccountsQueryVariables = {};\n\n\nexport type AccountsQuery = (\n  { __typename?: 'Query' }\n  & { accounts: Array<(\n    { __typename?: 'Account' }\n    & Pick<Account, 'id' | 'balance' | 'currency'>\n  )> }\n);\n\nexport type ByeQueryVariables = {};\n\n\nexport type ByeQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'bye'>\n);\n\nexport type CreateAccountMutationVariables = {\n  currency: Scalars['String']\n};\n\n\nexport type CreateAccountMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createAccount'>\n);\n\nexport type HelloQueryVariables = {};\n\n\nexport type HelloQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'hello'>\n);\n\nexport type LoginMutationVariables = {\n  email: Scalars['String'],\n  password: Scalars['String']\n};\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'LoginResponse' }\n    & Pick<LoginResponse, 'accessToken'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'email' | 'firstName' | 'lastName'>\n    ) }\n  ) }\n);\n\nexport type LogoutMutationVariables = {};\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'firstName' | 'lastName'>\n  )> }\n);\n\nexport type RegisterMutationVariables = {\n  email: Scalars['String'],\n  password: Scalars['String'],\n  firstName: Scalars['String'],\n  lastName: Scalars['String'],\n  dateOfBirth: Scalars['String'],\n  streetAddress: Scalars['String'],\n  postCode: Scalars['String'],\n  city: Scalars['String'],\n  country: Scalars['String']\n};\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'register'>\n);\n\nexport type UsersQueryVariables = {};\n\n\nexport type UsersQuery = (\n  { __typename?: 'Query' }\n  & { users: Array<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'firstName' | 'lastName'>\n  )> }\n);\n\n\nexport const AccountsDocument = gql`\n    query Accounts {\n  accounts {\n    id\n    balance\n    currency\n  }\n}\n    `;\n\n/**\n * __useAccountsQuery__\n *\n * To run a query within a React component, call `useAccountsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAccountsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAccountsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAccountsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AccountsQuery, AccountsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AccountsQuery, AccountsQueryVariables>(AccountsDocument, baseOptions);\n      }\nexport function useAccountsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AccountsQuery, AccountsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AccountsQuery, AccountsQueryVariables>(AccountsDocument, baseOptions);\n        }\nexport type AccountsQueryHookResult = ReturnType<typeof useAccountsQuery>;\nexport type AccountsLazyQueryHookResult = ReturnType<typeof useAccountsLazyQuery>;\nexport type AccountsQueryResult = ApolloReactCommon.QueryResult<AccountsQuery, AccountsQueryVariables>;\nexport const ByeDocument = gql`\n    query Bye {\n  bye\n}\n    `;\n\n/**\n * __useByeQuery__\n *\n * To run a query within a React component, call `useByeQuery` and pass it any options that fit your needs.\n * When your component renders, `useByeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useByeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useByeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ByeQuery, ByeQueryVariables>) {\n        return ApolloReactHooks.useQuery<ByeQuery, ByeQueryVariables>(ByeDocument, baseOptions);\n      }\nexport function useByeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ByeQuery, ByeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ByeQuery, ByeQueryVariables>(ByeDocument, baseOptions);\n        }\nexport type ByeQueryHookResult = ReturnType<typeof useByeQuery>;\nexport type ByeLazyQueryHookResult = ReturnType<typeof useByeLazyQuery>;\nexport type ByeQueryResult = ApolloReactCommon.QueryResult<ByeQuery, ByeQueryVariables>;\nexport const CreateAccountDocument = gql`\n    mutation CreateAccount($currency: String!) {\n  createAccount(currency: $currency)\n}\n    `;\nexport type CreateAccountMutationFn = ApolloReactCommon.MutationFunction<CreateAccountMutation, CreateAccountMutationVariables>;\n\n/**\n * __useCreateAccountMutation__\n *\n * To run a mutation, you first call `useCreateAccountMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateAccountMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createAccountMutation, { data, loading, error }] = useCreateAccountMutation({\n *   variables: {\n *      currency: // value for 'currency'\n *   },\n * });\n */\nexport function useCreateAccountMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateAccountMutation, CreateAccountMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateAccountMutation, CreateAccountMutationVariables>(CreateAccountDocument, baseOptions);\n      }\nexport type CreateAccountMutationHookResult = ReturnType<typeof useCreateAccountMutation>;\nexport type CreateAccountMutationResult = ApolloReactCommon.MutationResult<CreateAccountMutation>;\nexport type CreateAccountMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateAccountMutation, CreateAccountMutationVariables>;\nexport const HelloDocument = gql`\n    query Hello {\n  hello\n}\n    `;\n\n/**\n * __useHelloQuery__\n *\n * To run a query within a React component, call `useHelloQuery` and pass it any options that fit your needs.\n * When your component renders, `useHelloQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHelloQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useHelloQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<HelloQuery, HelloQueryVariables>) {\n        return ApolloReactHooks.useQuery<HelloQuery, HelloQueryVariables>(HelloDocument, baseOptions);\n      }\nexport function useHelloLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<HelloQuery, HelloQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<HelloQuery, HelloQueryVariables>(HelloDocument, baseOptions);\n        }\nexport type HelloQueryHookResult = ReturnType<typeof useHelloQuery>;\nexport type HelloLazyQueryHookResult = ReturnType<typeof useHelloLazyQuery>;\nexport type HelloQueryResult = ApolloReactCommon.QueryResult<HelloQuery, HelloQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    user {\n      id\n      email\n      firstName\n      lastName\n    }\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    email\n    firstName\n    lastName\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($email: String!, $password: String!, $firstName: String!, $lastName: String!, $dateOfBirth: String!, $streetAddress: String!, $postCode: String!, $city: String!, $country: String!) {\n  register(email: $email, password: $password, firsName: $firstName, lastName: $lastName, dateOfBirth: $dateOfBirth, streetAddress: $streetAddress, postCode: $postCode, city: $city, country: $country)\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      firstName: // value for 'firstName'\n *      lastName: // value for 'lastName'\n *      dateOfBirth: // value for 'dateOfBirth'\n *      streetAddress: // value for 'streetAddress'\n *      postCode: // value for 'postCode'\n *      city: // value for 'city'\n *      country: // value for 'country'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    email\n    firstName\n    lastName\n  }\n}\n    `;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n      }\nexport function useUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = ApolloReactCommon.QueryResult<UsersQuery, UsersQueryVariables>;","import React from 'react';\n\nexport const Loading: React.FC = () => {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n            }}\n        >\n            <img src=\"loading.svg\" alt=\"Loading...\" style={{ height: '124px' }} />\n        </div>\n    );\n};\n","import { createMuiTheme, Theme } from '@material-ui/core';\n\nenum ColorScheme {\n    PRIMARY = '#2196f3',\n}\n\nexport const theme: Theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: ColorScheme.PRIMARY,\n        },\n        contrastThreshold: 3,\n        tonalOffset: 0.2,\n    },\n});\n","import React from 'react';\nimport { useUsersQuery } from '../generated/graphql';\nimport { Loading } from '../components/Loading';\n\ninterface Props {}\n\nexport const Home: React.FC<Props> = () => {\n    const { data } = useUsersQuery({ fetchPolicy: 'network-only' });\n\n    if (!data) {\n        return <Loading />;\n    }\n\n    return (\n        <div>\n            <div>users: </div>\n            <ul>\n                {data.users.map(x => {\n                    return (\n                        <li key={x.id}>\n                            {x.id}, {x.email}, {x.firstName} {x.lastName}\n                        </li>\n                    );\n                })}\n            </ul>\n        </div>\n    );\n};\n","import * as yup from 'yup';\n\nexport const registerValidationSchema = yup.object({\n    firstName: yup.string().required('First name is required'),\n    lastName: yup.string().required('Last name is required'),\n    email: yup\n        .string()\n        .email()\n        .required('Email is required'),\n    streetAddres: yup.string().required('Street address is required'),\n    postCode: yup.string().required('Post code is required'),\n    city: yup.string().required('City is required'),\n    country: yup.string().required('Country is required'),\n    password: yup.lazy(value =>\n        !value\n            ? yup.string()\n            : yup\n                  .string()\n                  .min(6, 'Password must be at least 6 characters')\n                  .required('Password is required'),\n    ),\n    confirmPassword: yup.string().oneOf([yup.ref('password')], 'Passwords do not match'),\n    dateOfBirth: yup.date().required('Date of birth is required'),\n});\n","import { FieldAttributes, useField } from 'formik';\nimport React from 'react';\nimport { ThemeProvider, CssBaseline, TextField } from '@material-ui/core';\nimport { theme } from '../theme';\n\nexport const FormTextField: React.FC<FieldAttributes<{}>> = ({\n    placeholder,\n    className,\n    type,\n    ...props\n}) => {\n    const [field, meta] = useField<{}>(props);\n    const errorText = meta.error && meta.touched ? meta.error : '';\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <TextField\n                className={className}\n                type={type}\n                variant=\"standard\"\n                required={true}\n                placeholder={placeholder}\n                {...field}\n                helperText={errorText}\n                error={!!errorText}\n            />\n        </ThemeProvider>\n    );\n};\n","import React from 'react';\nimport { Alert } from '@material-ui/lab';\n\ninterface AlertMessageProps {\n    message: string;\n}\n\nexport const AlertMessage: React.FC<AlertMessageProps> = ({ message }) => {\n    return (\n        <Alert variant=\"outlined\" severity=\"error\">\n            {message}\n        </Alert>\n    );\n};\n","import React, { useState } from 'react';\nimport { Formik, Form } from 'formik';\nimport { useRegisterMutation } from '../generated/graphql';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Button, makeStyles, ThemeProvider } from '@material-ui/core';\nimport { theme } from '../theme';\nimport { registerValidationSchema } from '../schemas /registerValidationSchema';\nimport { FormTextField } from '../components/FormTextField';\nimport { AlertMessage } from '../components/AlertMessage';\n\nconst useStyles = makeStyles({\n    headerText: {\n        textAlign: 'center',\n    },\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        width: '420px',\n        margin: '0 auto',\n    },\n    alignedFormContent: {\n        marginTop: 12,\n        display: 'flex',\n        width: '100%',\n    },\n    alignedFormField: {\n        width: '50%',\n        marginRight: 8,\n    },\n    formField: {\n        width: '411px',\n        marginRight: 8,\n        marginTop: 12,\n    },\n    formButton: {\n        marginTop: 12,\n        textAlign: 'center',\n    },\n    loginText: {\n        margintop: 12,\n    },\n});\n\nexport const Register: React.FC<RouteComponentProps> = ({ history }) => {\n    const [register] = useRegisterMutation();\n    const [alertMessage, setAlertMessage] = useState('');\n    const classes = useStyles();\n\n    return (\n        <div>\n            <div>\n                <h1 className={classes.headerText}>Sign Up</h1>\n            </div>\n            {alertMessage.length > 0 && (\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\n                    <AlertMessage message={alertMessage} />\n                </div>\n            )}\n            <Formik\n                initialValues={{\n                    firstName: '',\n                    lastName: '',\n                    streetAddres: '',\n                    postCode: '',\n                    city: '',\n                    country: '',\n                    email: '',\n                    password: '',\n                    confirmPassword: '',\n                    dateOfBirth: '',\n                }}\n                validationSchema={registerValidationSchema}\n                onSubmit={async (data, { setSubmitting, resetForm }) => {\n                    setSubmitting(true);\n\n                    const response = await register({\n                        variables: {\n                            firstName: data.firstName,\n                            lastName: data.lastName,\n                            email: data.email,\n                            password: data.password,\n                            streetAddress: data.streetAddres,\n                            postCode: data.postCode,\n                            city: data.city,\n                            country: data.country,\n                            dateOfBirth: data.dateOfBirth,\n                        },\n                    });\n\n                    if (response.data?.register) {\n                        history.push('/login');\n                        setSubmitting(false);\n                        resetForm();\n                    } else {\n                        setAlertMessage('User with that email already exists.');\n                        setSubmitting(false);\n                    }\n                }}\n            >\n                {({ isSubmitting }) => (\n                    <div className={classes.root}>\n                        <Form onChange={() => setAlertMessage('')}>\n                            <div className={classes.alignedFormContent}>\n                                <FormTextField\n                                    className={classes.alignedFormField}\n                                    name=\"firstName\"\n                                    placeholder=\"First name\"\n                                    type=\"input\"\n                                />\n                                <FormTextField\n                                    className={classes.alignedFormField}\n                                    name=\"lastName\"\n                                    placeholder=\"Last name\"\n                                    type=\"input\"\n                                />\n                            </div>\n                            <div>\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"streetAddres\"\n                                    placeholder=\"Street address\"\n                                    type=\"input\"\n                                />\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"postCode\"\n                                    placeholder=\"Post code\"\n                                    type=\"input\"\n                                />\n                                <div className={classes.alignedFormContent}>\n                                    <FormTextField\n                                        className={classes.alignedFormField}\n                                        name=\"city\"\n                                        placeholder=\"City\"\n                                        type=\"input\"\n                                    />\n                                    <FormTextField\n                                        className={classes.alignedFormField}\n                                        name=\"country\"\n                                        placeholder=\"Country\"\n                                        type=\"input\"\n                                    />\n                                </div>\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"email\"\n                                    placeholder=\"Email\"\n                                    type=\"input\"\n                                />\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"password\"\n                                    placeholder=\"Password\"\n                                    type=\"password\"\n                                />\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"confirmPassword\"\n                                    placeholder=\"Confirm password\"\n                                    type=\"password\"\n                                />\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"dateOfBirth\"\n                                    type=\"date\"\n                                />\n                            </div>\n                            <div className={classes.formButton}>\n                                <ThemeProvider theme={theme}>\n                                    <Button\n                                        disabled={isSubmitting}\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        type=\"submit\"\n                                        style={{ marginTop: 12 }}\n                                    >\n                                        Sign Up\n                                    </Button>\n                                </ThemeProvider>\n                            </div>\n                            <div className={classes.loginText}>\n                                <p>\n                                    Already have an account? <a href=\"/login\">Login here.</a>\n                                </p>\n                            </div>\n                        </Form>\n                    </div>\n                )}\n            </Formik>\n        </div>\n    );\n};\n","import * as yup from 'yup';\n\nexport const loginValidationSchema = yup.object({\n    email: yup\n        .string()\n        .email()\n        .required('Email is required'),\n    password: yup.lazy(value =>\n        !value\n            ? yup.string()\n            : yup\n                  .string()\n                  .min(6, 'Password must be at least 6 characters')\n                  .required('Password is required'),\n    ),\n});\n","import React, { useState } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { useLoginMutation, MeDocument, MeQuery } from '../generated/graphql';\nimport { setAccessToken } from '../accessToken';\nimport { Formik, Form } from 'formik';\nimport { FormTextField } from '../components/FormTextField';\nimport { Button, makeStyles, ThemeProvider } from '@material-ui/core';\nimport { theme } from '../theme';\nimport { loginValidationSchema } from '../schemas /loginValidationSchema';\nimport { AlertMessage } from '../components/AlertMessage';\n\nconst useStyles = makeStyles({\n    headerText: {\n        textAlign: 'center',\n    },\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        width: '420px',\n        margin: '0 auto',\n    },\n    formField: {\n        width: '411px',\n        marginRight: 8,\n        marginTop: 12,\n    },\n    formButton: {\n        marginTop: 12,\n        textAlign: 'center',\n    },\n    registerText: {\n        marginTop: 12,\n    },\n});\n\nexport const Login: React.FC<RouteComponentProps> = ({ history }) => {\n    const [login] = useLoginMutation();\n    const [alertMessage, setAlertMessage] = useState('');\n    const classes = useStyles();\n\n    return (\n        <div>\n            <div>\n                <h1 className={classes.headerText}>Login</h1>\n            </div>\n            {alertMessage.length > 0 && (\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\n                    <AlertMessage message={alertMessage} />\n                </div>\n            )}\n            <Formik\n                initialValues={{ email: '', password: '' }}\n                validationSchema={loginValidationSchema}\n                onSubmit={async (data, { setSubmitting, resetForm }) => {\n                    setSubmitting(true);\n\n                    try {\n                        const response = await login({\n                            variables: {\n                                email: data.email,\n                                password: data.password,\n                            },\n                            update: (store, { data }) => {\n                                if (!data) {\n                                    return null;\n                                }\n                                store.writeQuery<MeQuery>({\n                                    query: MeDocument,\n                                    data: {\n                                        me: data.login.user,\n                                    },\n                                });\n                            },\n                        });\n\n                        if (response && response.data) {\n                            setAccessToken(response.data.login.accessToken);\n                            history.push('/accounts');\n                            setSubmitting(false);\n                            resetForm();\n                        }\n                    } catch (error) {\n                        const errorMessage = error.message.split(':')[1];\n                        setAlertMessage(errorMessage);\n                        setSubmitting(false);\n                    }\n                }}\n            >\n                {({ isSubmitting }) => (\n                    <div className={classes.root}>\n                        <Form>\n                            <div>\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"email\"\n                                    placeholder=\"Email\"\n                                    type=\"input\"\n                                />\n                                <FormTextField\n                                    className={classes.formField}\n                                    name=\"password\"\n                                    placeholder=\"Password\"\n                                    type=\"password\"\n                                />\n                            </div>\n                            <div className={classes.formButton}>\n                                <ThemeProvider theme={theme}>\n                                    <Button\n                                        disabled={isSubmitting}\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        type=\"submit\"\n                                        style={{ marginTop: 12 }}\n                                    >\n                                        Login\n                                    </Button>\n                                </ThemeProvider>\n                            </div>\n                            <div className={classes.registerText}>\n                                <p>\n                                    Don't have an account? <a href=\"/register\">Sign up here.</a>\n                                </p>\n                            </div>\n                        </Form>\n                    </div>\n                )}\n            </Formik>\n        </div>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { AppBar, Typography, Button, makeStyles, Toolbar, ThemeProvider } from '@material-ui/core';\nimport { useMeQuery, useLogoutMutation } from '../generated/graphql';\nimport { setAccessToken } from '../accessToken';\nimport { useHistory } from 'react-router-dom';\nimport { theme } from '../theme';\n\nconst useStyles = makeStyles({\n    root: {\n        flexGrow: 1,\n    },\n    title: {\n        flexGrow: 1,\n    },\n});\n\nexport const Header: React.FC = () => {\n    const { data, loading } = useMeQuery();\n    const [logout, { client }] = useLogoutMutation();\n    const [showAuthUserButtons, setShowAuthUserButtons] = useState(false);\n    const history = useHistory();\n    const classes = useStyles();\n\n    useEffect(() => {\n        if (!loading && data && data.me) {\n            setShowAuthUserButtons(true);\n        } else {\n            setShowAuthUserButtons(false);\n        }\n    }, [data, loading]);\n\n    // let body: any = null;\n\n    // if (loading) {\n    //     body = null;\n    // } else if (data && data.me) {\n    //     body = (\n    //         <div>\n    //             You are logged in as: {data.me.firstName} {data.me.lastName}\n    //         </div>\n    //     );\n    // }\n\n    const renderNonAuthUserButtons = () => {\n        return (\n            <div>\n                <Button\n                    color=\"inherit\"\n                    onClick={e => {\n                        e.preventDefault();\n                        history.push('/login');\n                    }}\n                >\n                    Login\n                </Button>\n                <Button\n                    color=\"inherit\"\n                    onClick={e => {\n                        e.preventDefault();\n                        history.push('/register');\n                    }}\n                >\n                    Sign Up\n                </Button>\n            </div>\n        );\n    };\n\n    const renderAuthUserButtons = () => {\n        return (\n            <div>\n                <Button\n                    color=\"inherit\"\n                    onClick={e => {\n                        e.preventDefault();\n                        history.push('/accounts');\n                    }}\n                >\n                    Accounts\n                </Button>\n                <Button\n                    color=\"inherit\"\n                    onClick={async () => {\n                        await logout().then(() => history.push('/'));\n                        setAccessToken('');\n                        await client!.resetStore();\n                    }}\n                >\n                    Logout\n                </Button>\n            </div>\n        );\n    };\n\n    return (\n        <div className={classes.root}>\n            <ThemeProvider theme={theme}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography className={classes.title} variant=\"h6\">\n                            Apollo\n                        </Typography>\n                        {!!showAuthUserButtons\n                            ? renderAuthUserButtons()\n                            : renderNonAuthUserButtons()}\n                    </Toolbar>\n                </AppBar>\n            </ThemeProvider>\n        </div>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useAccountsQuery, useCreateAccountMutation, AccountsDocument } from '../generated/graphql';\nimport { makeStyles, Button, ThemeProvider } from '@material-ui/core';\nimport { theme } from '../theme';\nimport { Loading } from '../components/Loading';\nimport { AlertMessage } from '../components/AlertMessage';\n\nconst useStyles = makeStyles({\n    root: {\n        display: 'flex',\n        alignItems: 'center',\n        textalign: 'center',\n        flexDirection: 'column',\n    },\n    newAccountButton: {\n        position: 'absolute',\n        right: 20,\n        marginTop: 10,\n    },\n});\n\nexport const Accounts: React.FC = () => {\n    const { data, loading } = useAccountsQuery();\n    const [createAccount] = useCreateAccountMutation();\n    const [alertMessage, setAlertMessage] = useState('');\n    const classes = useStyles();\n\n    useEffect(() => {}, [loading, data]);\n\n    if (!data) {\n        return <Loading />;\n    }\n\n    return (\n        <div className={classes.root}>\n            <div>\n                <h2>Accounts</h2>\n            </div>\n            {alertMessage.length > 0 && (\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\n                    <AlertMessage message={alertMessage} />\n                </div>\n            )}\n            <div className={classes.newAccountButton}>\n                <ThemeProvider theme={theme}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        onClick={async e => {\n                            e.preventDefault();\n\n                            const currency: string = 'BTC';\n\n                            try {\n                                const response = await createAccount({\n                                    variables: {\n                                        currency: currency,\n                                    },\n                                    refetchQueries: [\n                                        {\n                                            query: AccountsDocument,\n                                            variables: {},\n                                        },\n                                    ],\n                                });\n                                if (response && response.data) {\n                                    console.log('working...');\n                                }\n                            } catch (error) {\n                                const errorMessage = error.message.split(':')[1];\n                                setAlertMessage(errorMessage);\n                            }\n                        }}\n                    >\n                        + New\n                    </Button>\n                </ThemeProvider>\n            </div>\n            <div>\n                <ul>\n                    {data.accounts.map(account => {\n                        return (\n                            <li key={account.id}>\n                                {account.currency} {account.balance}\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n        </div>\n    );\n};\n","import React, { ComponentType } from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { Home } from './pages/Home';\nimport { Register } from './pages/Register';\nimport { Login } from './pages/Login';\nimport { Header } from './components/Header';\nimport { Accounts } from './pages/Accounts';\nimport { getAccessToken } from './accessToken';\n\ninterface AuthenticatedRouteProps {\n    exact?: boolean;\n    path: string;\n    component: ComponentType<any>;\n}\n\nconst AuthenticatedRoute = ({ component: Component, ...rest }: AuthenticatedRouteProps) => (\n    <Route\n        {...rest}\n        render={props =>\n            getAccessToken() ? <Component {...props} /> : <Redirect to={{ pathname: '/login' }} />\n        }\n    />\n);\n\nconst LoggedInRoute = ({ component: Component, ...rest }: AuthenticatedRouteProps) => (\n    <Route\n        {...rest}\n        render={props =>\n            getAccessToken() ? (\n                <Redirect to={{ pathname: '/accounts' }} />\n            ) : (\n                <Component {...props} />\n            )\n        }\n    />\n);\n\nexport const Routes: React.FC = () => {\n    return (\n        <>\n            <Helmet>\n                <style>{'body { background-color: snow; }'}</style>\n            </Helmet>\n            <BrowserRouter>\n                <div>\n                    <Header />\n                    <Switch>\n                        <Route exact path=\"/\" component={Home} />\n                        <LoggedInRoute exact path=\"/register\" component={Register} />\n                        <LoggedInRoute exact path=\"/login\" component={Login} />\n                        <AuthenticatedRoute exact path=\"/accounts\" component={Accounts} />\n                    </Switch>\n                </div>\n            </BrowserRouter>\n        </>\n    );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { getAccessToken, setAccessToken } from './accessToken';\nimport { TokenRefreshLink } from 'apollo-link-token-refresh';\nimport jwtDecode from 'jwt-decode';\nimport { App } from './App';\n\nconst REFRESH_TOKEN_ENDPOINT = 'http://localhost:4000/refresh_token';\n\nconst cache = new InMemoryCache({});\n\nconst requestLink = new ApolloLink(\n    (operation, forward) =>\n        new Observable(observer => {\n            let handle: any;\n            Promise.resolve(operation)\n                .then(operation => {\n                    const accessToken = getAccessToken();\n                    operation.setContext({\n                        headers: {\n                            authorization: accessToken ? `Bearer ${accessToken}` : '',\n                        },\n                    });\n                })\n                .then(() => {\n                    handle = forward(operation).subscribe({\n                        next: observer.next.bind(observer),\n                        error: observer.error.bind(observer),\n                        complete: observer.complete.bind(observer),\n                    });\n                })\n                .catch(observer.error.bind(observer));\n\n            return () => {\n                if (handle) handle.unsubscribe();\n            };\n        }),\n);\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        new TokenRefreshLink({\n            accessTokenField: 'accessToken',\n            isTokenValidOrUndefined: () => {\n                const token = getAccessToken();\n\n                if (!token) {\n                    return true;\n                }\n\n                try {\n                    const { exp } = jwtDecode(token);\n                    if (Date.now() >= exp * 1000) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } catch {\n                    return false;\n                }\n            },\n            fetchAccessToken: () => {\n                return fetch(REFRESH_TOKEN_ENDPOINT, {\n                    method: 'POST',\n                    credentials: 'include',\n                });\n            },\n            handleFetch: accessToken => {\n                setAccessToken(accessToken);\n            },\n            handleError: err => {\n                console.warn('Your refresh token is invalid. Try to relogin');\n                console.error(err);\n            },\n        }),\n        onError(({ graphQLErrors, networkError }) => {\n            console.log(graphQLErrors);\n            console.log(networkError);\n        }),\n        requestLink,\n        new HttpLink({\n            uri: 'http://localhost:4000/graphql',\n            credentials: 'include',\n        }),\n    ]),\n    cache,\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n    document.getElementById('root'),\n);\n","import React, { useState, useEffect } from 'react';\nimport { Routes } from './Routes';\nimport { setAccessToken } from './accessToken';\nimport { Loading } from './components/Loading';\n\nconst REFRESH_TOKEN_ENDPOINT = 'http://localhost:4000/refresh_token';\n\nexport const App: React.FC = () => {\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        fetch(REFRESH_TOKEN_ENDPOINT, {\n            method: 'POST',\n            credentials: 'include',\n        }).then(async res => {\n            const { accessToken } = await res.json();\n            setAccessToken(accessToken);\n            setLoading(false);\n        });\n    }, []);\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    return <Routes />;\n};\n"],"sourceRoot":""}